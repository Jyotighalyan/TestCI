<apex:component controller="AddOnWidgetController">
<div class="container-fluid margin-bot">
        <div class="row row-no-margin">
                <div class="col-md-12">
                    <div id="table-addon" class="table-title table-responsive text-center bootstrap-table">
                        </div>

                </div>
        </div>
        <div class="row row-no-margin margin-bot padding-left-small">
                <div class="col-md-12">
                        <button type="button" class="btn btn-primary" onclick="Widget.AddOn.saveData()">Save</button>
                </div>
        </div>
        <div class="row row-no-margin">
                <div class="col-md-12">
                        <div id='message' style="display: none;" class="table-title">
                <span><b>&#10004;</b>    Add-ons saved successfully. </span>
                </div>
         </div></div>
</div>
<style>
    body {
        background-color: transparent;
        font-family: "Arial", "helvetica", "sans-serif";
        font-size: 12px;
        font-weight: 400;
        text-rendering: optimizeLegibility;
    }
    .margin-bot{
            margin-bottom:20px;
    }
    .padding-left-small{
            padding-left:5px;
    }
    .row-no-margin{
            margin-left:0px;
            margin-right:0px;
    }
    .table-title {
        display: block;
        margin: auto;
        padding:5px;
        margin-bottom:10px;
        margin-top:10px;
    }

    .table-title h3 {
         /*margin-left:10%;*/
         color: black;
         font-size: 18px;
         font-weight: 400;
         font-style:normal;
         font-family: "Arial", "helvetica", "sans-serif";
         text-shadow: -1px -1px 1px rgba(0, 0, 0, 0.1);
    }
    /*** Table Styles **/
    .container-fluid .row #table-addon td {
            vertical-align:middle;
    }
    .table-addon {
        background: white;
        border-radius:3px;
        border-collapse: collapse;
        margin: auto;
        padding:5px;
        color:#6d706f;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        animation: float 5s infinite;
        margin-bottom: 10px;
    }

    .table-addon th {
        color:white;
        background:{!$Setup.WidgetStyle__c.dark__c};
        border-bottom:4px solid #9ea7af;
        border-right: 1px solid white;
        font-size:17px;
        font-family:'Arial';
        font-weight: 100;
        padding:15px;
        text-align:center;
        text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
        vertical-align:middle;
    }

    .table-addon th:first-child {
        border-top-left-radius:3px;
    }

    .table-addon th:last-child {
        border-top-right-radius:3px;
        border-right:none;
    }

    .table-addon tr {
        border-top: 1px solid #C1C3D1;
        border-bottom: 1px solid #C1C3D1;
        color:#6d706f;
        font-size:14px;
        font-weight:normal;
        text-shadow: 0 1px 1px rgba(256, 256, 256, 0.1);
    }
    .table-hover{
    }
    .table-hover tr:hover td {
        background:{!$Setup.WidgetStyle__c.hover__c};
        color:#FFFFFF;
    }

    .table-addon tr:first-child {
        border-top:none;
    }

    .table-addon tr:last-child {
        border-bottom:none;
    }

    .table-addon tr:nth-child(odd) td {
        background:{!$Setup.WidgetStyle__c.light__c};
    }

    .table-hover tr:nth-child(odd):hover td {
        background:{!$Setup.WidgetStyle__c.hover__c};
    }

    .table-addon tr:last-child td:first-child {
        border-bottom-left-radius:3px;
    }

    .table-addon tr:last-child td:last-child {
        border-bottom-right-radius:3px;
    }

    .table-addon td {
        background:#FFFFFF;
        padding:10px;
        color:#6d706f;
        text-align:center;
        vertical-align:middle;
        font-weight:300;
        font-size:14px;
        text-shadow: -1px -1px 1px rgba(0, 0, 0, 0.1);
        border-right: 1px solid #C1C3D1;
    }

    .table-addon td:last-child {
        border-right: 0px;
    }

    .table-addon th.text-left {
        text-align: left;
    }

    .table-addon th.text-center {
        text-align: center;
    }

    .table-addon th.text-right {
        text-align: right;
    }

    .table-addon td.text-left {
        text-align: left;
    }

    .table-addon td.text-center {
        text-align: center;
    }

    .table-addon td.text-right {
        text-align: right;
    }
    .table-addon tr td:first-child{
            width:40px;
    }
    .table-addon tr td:nth-child(2){
            width:100px;
    }
    .table-addon input{
            width: 35px;
            height: 23px;
            background: #ffffff;
            border:1px solid #00adc7;
            position: relative;
            padding-left:3px;
    }

    .table-addon input[type="number"]{
            width: 32px;
            height: 23px;
            background: #fcfff4;
            position: relative;
            font-family:Arial;
            font-weight:600;
            text-align:center;
            color:#6d706f;
    }

    .captionText {
        color: white;
        text-align:center;
        vertical-align:middle;
        font-size:17px;
        font-family:'Arial';
        font-weight: 100;
    }
    .btnSave {
            width:100px;
            margin-top:30px;
            background:#3d94f6;
            -moz-border-radius:6px;
            -webkit-border-radius:6px;
            border-radius:6px;
            border:1px solid #337fed;
            cursor:pointer;
            color:#ffffff;
            font-family:Arial;
            font-size:15px;
            font-weight:bold;
            padding:6px 24px;
            text-decoration:none;
            text-shadow:0px 1px 0px #1570cd;
            float:right;
            margin-right:9%;
    }
    .btnSave:hover {
            background:#1797C0;
    }
    .header-name{
            text-align:center;
    }
    .header-image{
            vertical-align:middle;
    }
    #message {
            display:table;
            font-family:Arial,Helvetica,sans-serif;
            margin: auto;
            padding:8px;
            width: 20%;
            color:#fafafa;
            margin-top:5px;
            background-color:#51A351;
            border-radius:3px;
            font-size:18px;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
    }
    #message span {
            text-align: center;
            width: 100%;
            display:table-cell;
            vertical-align:middle;
    }
    .lookupInput img.deleteIcon, .lookupInput div.deleteIcon {
        background-image: url({!URLFOR($Resource.cscfga__delete_icon)});
    }
    label.requiredOn {
        font-weight: bold;
    }
    label.requiredOn:after {
        color: #e32;
        content: ' *';
        display:inline;
    }
    .lato tr td {
        font-family: Lato;
    }
    p.attributeErrorMessage {
        margin: 0;
        margin-top: 3px;
        color: #C00;
        position: relative;
        right: -40%;
    }
    .form-control.form-control-date {
        width: inherit;
        display:inline-block;
    }

    .form-control.form-control-date[readOnly] {
        color: #34495e;
        background-color: #fff;
        opacity: 1;
        border-color: #bdc3c7;;
    }

    .form-control.form-control-lookup {
        width: inherit;
        display:inline-block;
    }

    .form-control.form-control-lookup[readOnly] {
        color: #34495e;
        background-color: #fff;
        opacity: 1;
        border-color: #bdc3c7;;
    }

    .form-control.form-control-select-lookup {
        padding: 0px;
    }

    .select2-container.select2-allowclear {
        width: 100%;
        height: 100%;
    }

    .select2-choice {
        width: 100% !important;
        height: 100% !important;
        padding: 0px !important;
        background-image: none !important;
        background-color: #fff !important;
    }

    .select2-chosen {
        padding:  8px 12px;
    }

    .select2-search-choice-close {
        top: 12px !important;
    }

    .select2-arrow {
        border-width: 6px 3px !important;
        right: 4px !important;
        top: 16px !important;
        width: auto !important;
        border-left: 3px solid rgba(0, 0, 0, 0) !important;
        border-radius: 0px !important;
        background: #fff !important;
        background-image: none !important;
    }
    /* Quick and dirty override for Lightning Template */
    .bootstrap-iso .panel-success {
        border-color: #d8dde6;
    }
    .bootstrap-iso .panel-success > .panel-heading {
        background-color: #f4f6f9;
        color: #16325c;
        border: none;
    }
    .bootstrap-iso .panel-success > .panel-heading:first-child {
        border-bottom: 1px solid #d8dde6;
        border-top-left-radius: 0.25rem;
        border-top-right-radius: 0.25rem;
    }
    .bootstrap-iso .panel-success > .panel-heading:last-child {
        border-top: 1px solid #d8dde6;
        border-bottom-left-radius: 0.25rem;
        border-bottom-right-radius: 0.25rem;
    }
    .bootstrap-iso .panel-title {
        font-weight: 300;
        font-size: 1.125rem;
        line-height: 1.75;
    }
    .bootstrap-iso .btn-primary {
        padding: 0 1rem;
        font-weight: 400 !important;
        text-align: center;
        vertical-align: middle;
        border: 1px solid #d8dde6;
        background-color: #fff;
        line-height: 1.75rem;
        min-height: 2rem;
        color: #0070d2;
        transition: color 50ms linear,background-color 50ms linear;
    }
    .bootstrap-iso .btn-primary:not(:first-child) {
        border-left: none !important;
    }
    .bootstrap-iso .btn-primary:hover,
    .bootstrap-iso .btn-primary:active {
        background-color: #f4f6f9;
        color: #005fb2;
        border: 1px solid #d8dde6;
    }
    .bootstrap-iso .btn-primary:focus {
        background-color: #0070d2;
        border: 1px solid #0070d2;
        color: #fff;
    }
    .bootstrap-iso .panel {
        box-shadow: none;
    }
    .bootstrap-iso h4, .bootstrap-iso .h4 {
        display: block;
        font-size: 1.5rem;
        font-weight: 300;
        line-height: 1.25rem;
        margin: 0 0 1rem 0;
    }
    /* removing grid definitions except the half width (col-md-6) */
    .bootstrap-iso .col-md-1, .bootstrap-iso .col-md-2,
    .bootstrap-iso .col-md-3, .bootstrap-iso .col-md-4,
    /*  .bootstrap-iso .col-md-5, .bootstrap-iso .col-md-6, */
    .bootstrap-iso .col-md-7, .bootstrap-iso .col-md-8,
    .bootstrap-iso .col-md-9, .bootstrap-iso .col-md-10,
    .bootstrap-iso .col-md-11, .bootstrap-iso .col-md-12 {
        float: none;
        display: block;
        width: 100%;
        text-align: left;
    }
    /* labels */
    .bootstrap-iso label {
        display: inline-block;
        color: #54698d;
        font-size: .75rem;
        line-height: 1.5;
        margin-right: .75rem;
        margin-bottom: .25rem;
        font-weight: normal;
    }
    label.requiredOn:after {
        color: #c23934;
    }
    /* form elements */
    .bootstrap-iso .form-control,
    .bootstrap-iso select,
    .bootstrap-iso .select2-search input[type="text"] {
        background-color: #fff;
        color: #16325c;
        border: 1px solid #d8dde6;
        border-radius: .25rem;
        width: 100%;
        transition: border .1s linear,background-color .1s linear;
    }
    .bootstrap-iso .dateInput .form-control {
        width: calc(100% - 120px);
    }
    .bootstrap-iso label.checkbox,
    .bootstrap-iso label.radio {
        padding-left: 0;
    }
    .bootstrap-iso .radioOptions label.radio {
        padding-left: 32px;
    }
    .bootstrap-iso .checkbox input[type="checkbox"].custom-checkbox:checked + .icons .icon-checked,
    .bootstrap-iso .radio input[type="checkbox"].custom-checkbox:checked + .icons .icon-checked,
    .bootstrap-iso .checkbox input[type="radio"].custom-radio:checked + .icons .icon-checked,
    .bootstrap-iso .radio input[type="radio"].custom-radio:checked + .icons .icon-checked,
    .bootstrap-iso .checkbox input[type="checkbox"].custom-checkbox:checked + .icons,
    .bootstrap-iso .radio input[type="checkbox"].custom-checkbox:checked + .icons,
    .bootstrap-iso .checkbox input[type="radio"].custom-radio:checked + .icons,
    .bootstrap-iso .radio input[type="radio"].custom-radio:checked + .icons {
        color: #0070d2;
    }
    .select2-default {
        color: #16325c !important;
    }
    .bootstrap-iso select {
        padding-left: .5rem;
        padding-right: 1.5rem;
    }
    .bootstrap-iso .form-group.focus .form-control,
    .bootstrap-iso .form-control:focus,
    .bootstrap-iso select:focus,
    .bootstrap-iso .form-group.focus .select2-search input[type="text"],
    .bootstrap-iso .select2-search input[type="text"]:focus {
        border-color: #1589ee;
        background-color: #fff;
        box-shadow: 0 0 3px #0070D2;
    }
    .bootstrap-iso .select2-container a:hover, .bootstrap-iso .select2-container a:focus {
        color: #16325c;
    }
    #select-list label {
        display: inline-block;
        color: #54698d;
        font-size: .75rem;
        line-height: 1.25;
        margin-right: 0;
        margin-bottom: 0;
        font-weight: normal;
        vertical-align: middle;
    }
    #select-list select {
        width: auto;
        display: inline-block;
        line-height: 1rem;
        height: 1.5rem;
    }
    /* slider */
    .slidingPanel > .slidingHandle {
        line-height: 40px;
        padding: 0;
    }
    #tabsContainer button {
        height: 40px;
    }
    .bootstrap-iso .bg-success {
        background: #f4f6f9;
        border: 1px solid #d8dde6;
    }
    /* tables */
    .bootstrap-iso .table {
        border-bottom: 1px solid #d8dde6;
    }
    .bootstrap-iso .table > thead > tr > th,
    .bootstrap-iso .table > tbody > tr > th,
    .bootstrap-iso .table > tfoot > tr > th,
    .bootstrap-iso .table > thead > tr > td,
    .bootstrap-iso .table > tbody > tr > td,
    .bootstrap-iso .table > tfoot > tr > td {
        padding: .5rem;
        position: relative;
        vertical-align: middle;
        font-size: .875rem;
        line-height: 1.25;
        letter-spacing: .0625em;
        color: #16325c;
        background: #fff;
        border: none;
        border-top: 1px solid #d8dde6;
        font-weight: normal;
        text-shadow: none;
    }
    .bootstrap-iso .table > thead > tr:hover > td,
    .bootstrap-iso .table > tbody > tr:hover > td,
    .bootstrap-iso .table > tfoot > tr:hover > td {
        background: #f4f6f9;
        box-shadow: #d8dde6 0 -1px 0 inset;
    }
    .bootstrap-iso .table > thead > tr > th,
    .bootstrap-iso .table > tbody > tr > th,
    .bootstrap-iso .table > tfoot > tr > th {
        text-transform: uppercase;
        color: #54698d;
    }
    .table-feature th {
        border: none;
        border-top: 1px solid #d8dde6;
        font-weight: 400;
    }
    .bootstrap-iso .table > tbody > tr > td span[data-cs-action="editRelatedProduct"],
    .bootstrap-iso .table > tbody > tr > td span[data-cs-action="removeRelatedProduct"] {
        color: #0070d2;
    }
    .bootstrap-iso .table > tbody > tr > td span[data-cs-action="editRelatedProduct"]:hover,
    .bootstrap-iso .table > tbody > tr > td span[data-cs-action="removeRelatedProduct"]:hover {
        color: #005fb2;
    }
    /* standard SF style override */
    .Custom24Tab .secondaryPalette, .individualPalette .Custom24Block .secondaryPalette,
    body .bPageBlock, body #bodyCell .bResource .secondaryPalette,
    body .secondaryPalette.bPageBlock, body .individualPalette .secondaryPalette.bPageBlock,
    body .bodyDiv .genericTable, body .genericPageBlockTable, body .bodyDiv .bSubBlock,
    body .bComponentBlock .bPageBlock, body .bMyDashboard .bPageBlock, body.rlHoverFrame .bPageBlock,
    body.subjectSelectionPopup div.choicesBox, body.lookupTab .secondaryPalette.bPageBlock,
    body.popupTab .secondaryPalette.bPageBlock, body.UserTagStatsPage .secondaryPalette.bPageBlock {
        border: 1px solid #d8dde6;
    }
    body .bPageBlock .pbHeader,
    body .bPageBlock .pbBottomButtons {
        background: #f4f6f9;
    }
    body .bEditBlock .pbBottomButtons, body .apexp .bPageBlock.apexDefaultPageBlock .pbBottomButtons {
        margin-top: 0;
    }
    body .bPageBlock, body .bPageBlock .pbBody {
        background: #fff;
    }
    .bPageBlock .pbTitle,
    body .bRelatedList .pbTitle h3,
    body .bPageBlock .pbTitle h2,
    body .bPageBlock .pbTitle h3,
    body .bSubBlock h3.lbHeader {
        color: #16325c;
        font-weight: 300;
        font-size: 1.125rem;
        line-height: 1.75;
    }
    body .pbButton.CS_configButtons button,
    body .pbButtonb.CS_configButtons button {
        padding: 0 1rem;
        font-weight: 400 !important;
        text-align: center;
        vertical-align: middle;
        border: 1px solid #d8dde6;
        background-color: #fff;
        line-height: 1.75rem;
        min-height: 2rem;
        color: #0070d2;
        transition: color 50ms linear,background-color 50ms linear;
        background-image: none;
        cursor: pointer;
        font-size: 0.75rem;
    }
    body .pbButton.CS_configButtons button:hover,
    body .pbButton.CS_configButtons button:active,
    body .pbButtonb.CS_configButtons button:hover,
    body .pbButtonb.CS_configButtons button:active {
        background-color: #f4f6f9;
        color: #005fb2;
    }
    body .bEditBlock .pbBottomButtons>table, body .apexp .bPageBlock.apexDefaultPageBlock .pbBottomButtons>table {
        border-top: none;
    }
    .Custom24Tab .tertiaryPalette, .individualPalette .Custom24Block .tertiaryPalette,
    .layoutEdit .individualPalette .Custom24Block .tertiaryPalette {
        background: #d8dde6;
        border-color: #d8dde6;
    }
    .apexp .bPageBlock.apexDefaultPageBlock .pbBody .pbSubheader {
        background-image: none;
        color: #16325c;
        margin: 0;
    }
    body .bPageBlock .pbBody .pbSubheader .hideListButton {
        background-position: 1px -11px;
    }
    body .bPageBlock .pbBody .labelCol, body .print .topics-label {
        color: #54698d;
        font-size: .75rem;
        line-height: 1.5;
        margin-right: .75rem;
        margin-bottom: .25rem;
        font-weight: normal;
    }
    /* tabs */
    .bootstrap-iso .btn-group.btn-breadcrumb {
        width: 100%;
        display: flex;
        align-items: flex-start;
        border-bottom: 1px solid #d8dde6;
        margin-bottom: 0.5rem;
    }
    .bootstrap-iso .btn-group.btn-breadcrumb .btn {
        background: transparent;
        font-size: .75rem;
        line-height: 1.25;
        text-transform: uppercase;
        letter-spacing: .0625em;
        color: #54698d;
        padding: 0 1rem;
        font-weight: normal;
        border-radius: 0;
        max-width: 100%;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        display: block;
        text-decoration: none;
        cursor: pointer;
        height: 3rem;
        line-height: 3rem;
        border-bottom: 2px solid transparent;
    }
    .bootstrap-iso .btn-group.btn-breadcrumb .btn.active {
        border-bottom: 2px solid #0070d2;
        color: #16325c;
    }
    .btn-breadcrumb .btn:not(:last-child):before,
    .btn-breadcrumb .btn:not(:last-child):after {
        display: none;
    }
    /* links */
    .bootstrap-iso a {
        color: #0070d2;
    }
    .bootstrap-iso a:hover {
        color: #005fb2;
    }
    .dateFormat {
        vertical-align: middle;
        font-size: 0.9rem;
    }
    /* error and info message styling */
    .message{
        border-style: none;
        border-width: 0px;
        padding: 0;
        margin: 0;
        background: transparent;
    }
    .messageText {
        font-weight: normal;
        font-size: 15px;
        line-height: 1;
        font-family: "Salesforce Sans", Arial, sans-serif !important;
    }
    .message .messageText {
        background-color: #fff !important;
        padding: 5px !important;
        margin: 0;
    }
    .messageText h4 {
        display: block;
        padding: 1rem;
        border-radius: 0.25rem;
    }
    .warningM3 .messageText {
        color: rgb(194, 57, 52);
    }
    .warningM3 .messageText h4 {
        background: rgb(194, 57, 52);
        color: #fff;
    }
    .infoM3 .messageText {
        color: #0070d2;
    }
    .infoM3 .messageText h4 {
        background: #0070d2;
        color: #fff;
    }
    table.messageTable {
        width: 100%;
    }
    table.messageTable tbody tr td:first-child {
        display: none;
    }
    p.attributeErrorMessage {
        color: rgb(194, 57, 52);
        right: 0;
        font-size: 80%;
    }
    .attributeError select,
    .attributeError input,
    .attributeError .form-control {
        border: 1px solid rgb(194, 57, 52) !important;
    }
    </style>
<script>
    Visualforce.remoting.timeout = 120000;

    if(typeof Widget == 'undefined') {
            Widget = {};
    } else {
            Widget = Widget || {};
    }

    Widget.AddOn = {

        configId: "configId",

        receivedJSON: '',

        receivedJSONs: [],

        addOnAttribute: {},

        getAttributeByName: function(name) {
            return CS.getAttributeValue(getConfigRef() + name + '_0');
        },

        getConfigRef: function() {
            return CS.Service.getCurrentConfigRef() != '' ? CS.Service.getCurrentConfigRef() + ':' : '';
        },

        getURLParameter: function(name) {
            return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search)||[,""])[1].replace(/\+/g, '%20'))||null
        },

        getInput: function () {
            try {
                if(priceItemAttribute === '' || addOnCategory === '') {
                    throw 'Please load categories and price item attribute name';
                }
                $('#table-addon').empty();
                Widget.AddOn.receivedJSONs = [];
                var priceItemId = Widget.AddOn.getAttributeByName(priceItemAttribute);
                var categories = [];
                for (key in addOnCategory) {
                    if (key != undefined) {
                        categories.push(key);
                    }
                }
                var configId = Widget.AddOn.getURLParameter(Widget.AddOn.configId);
                for(var i = 0; i < categories.length; i++) {
                    var category = categories[i];
                    // This remoting call will use the page's timeout value
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.AddOnWidgetController.getAvaialbleAddOns}',
                            priceItemId,
                            category,
                            configId,
                            Widget.AddOn.handleInput,
                            {escape: false}
                    );
                }
            } catch(err) {
                Widget.AddOn.emptyTable("#table-addon","No available Add-ons.");
        Widget.AddOn.toggleTableVisibility('#table-addon');
            }
        },

        handleInput: function (result, event) {
            var data2;
            if (result != undefined && result != '') {
                Widget.AddOn.receivedJSON = result;
                Widget.AddOn.receivedJSONs.push(result);
                data2 = JSON.parse(result);
            }

      if(data2 == undefined || (data2 != undefined && data2.length==0)){
        Widget.AddOn.removeTableButtons();
                Widget.AddOn.emptyTable("#table-addon","No available Add-ons.");
        Widget.AddOn.toggleTableVisibility('#table-addon');
            }
            else{
                Widget.AddOn.drawTable(data2,"#table-addon");
        Widget.AddOn.toggleTableVisibility('#table-addon');
        Widget.AddOn.createTableButtons();
            }
            var category = addOnCategory;
            Widget.AddOn.getSelectedAddOns();
        },

    //TODO: create a replacement function for drawTable. Should get an array of json objects, and then draw the table according to that.
    //TODO: even better make it templatable

        drawTable: function(data,div) {
            var table = $('<table></table>').addClass('table table-addon table-hover');
            var columnCount = data[0].length;

            var colNames=Widget.AddOn.GetHeaders(data);

            //Draw table's header
            var row = $("<tr/>");
            row.append($("<th>"));
            row.append($("<th>Name</th>"));

            for (var i = 0; i < colNames.length; i++) {
                    if(colNames[i]!="Id" && colNames[i]!="Quantity" && colNames[i]!="Image" && colNames[i]!="Name" && colNames[i]!="Selected" && colNames[i]!="category") {
                            row.append($("<th>").html(colNames[i]));
                    }
            }
            table.append(row);

            var isQuantity = data[0]["Quantity"] === "true" ? true : false;
            var tableName = '';
            //Draw table's data
            for (var i = 0; i < data.length; i++){
                    row = $("<tr/>");
                    if(isQuantity) {
                            row.append($('<td><input type="number" value="' + data[i].Selected + '" min="0" name="'+data[i].Id+'"></input></td>'));
                    } else {
                            row.append($('<td><input type="checkbox" value="' + data[i].Id + '"'+ (data[i].Selected !== "0" ? ' checked' : ' ') + '></input></td>'));
                    }
                     if(data[i]["Image"]==undefined || data[i]["Image"]==""){ // ZD
                            row.append($('<td>'+data[i].Name+'</td>'));
                    }
                    else{
                            if(isQuantity) {
                                    row.append($('<td><div class="header-name"><span>'+data[i].Name+'</span></div><div class="header-image"><img alt="' + data[i].Image + '" src="' + data[i].Image + '" style="width:50px;height:50px;"></div></td>')); // ZD
                            } else {
                                    row.append($('<td><div class="header-name"><span>'+data[i].Name+'</span></div><div class="header-image"><img src="' + data[i].Image + '" style="width:50px;height:50px;"></div></td>'));
                            }
                    }
                    for (var j = 0; j < colNames.length; j++) {
                            if(colNames[j]!="Id" && colNames[j]!="Quantity" && colNames[j]!="Image" && colNames[j]!="Name" && colNames[j]!="Selected" && colNames[j]!="category"){
                                    row.append($('<td>' + data[i][colNames[j]] + '</td>'));
                            }
                            if (colNames[j] == "Parent_Attribute") {
                                var inputs = data[i][colNames[j]].split('-');
                                this.addOnAttribute[inputs[0]] = inputs[1];
                            }
                            if (colNames[j] == "category") {
                                tableName = data[i][colNames[j]];
                            }
                    }
                    table.append(row);

            }
      // wrap table to be used as a section
          var tabId = tabId = tableName.replace(/\s/g,''),
            caption = $('<caption style="display:none">' + tableName + '</caption>').addClass('captionText');
            table.prepend(caption);
          // create section pane
          var pane = $('<div id="' + tabId + '" class="collapse"></div>').append(table);
            // append to div specified in handleInput method
            $(div).append(pane);
        },
        emptyTable: function(div,txt){
            var table = $('<table></table>').addClass('table table-addon table-mar');
            var row = $("<tr/>");
            table.append(row);
            row.append($("<th>"));
            row = $("<tr/>");
            row.append($('<td>'+txt+'</td>'));
            table.append(row);
            $(div).append(table);
      Widget.AddOn.toggleTableVisibility();
        },

        GetHeaders: function(obj) {
            var cols = new Array();
            for (var key in obj[0]) {
                cols.push(key);
            }
            return cols;
        },

    toggleTableVisibility: function() {
      ($('.table-title .table').hasClass('table-mar')) ? $('.table-title table.table-mar').hide() : '';
      ($('.table-title .table').hasClass('table-hover')) ? $('.table-title table.table-hover').show() : '';
    },

    removeTableButtons: function() {
      $('.btn-select-addon').remove();
    },

    createTableButtons: function() {
      $('button.btn-select-pricingitem').remove();
      var bn = [],
        btns = [],
        cap = $('.table.table-hover caption').not('.table-mar');
      $(cap).map(function() {
        bn.push($(this).text().replace(" ", ""));
      });

      $(bn).each(function (i) {
        var btn = $('<button class="btn btn-primary collapsed btn-select-addon" type="button" data-toggle="collapse" data-target="#' + bn[i].replace(" ", "") + '" aria-controls= ' + bn[i].replace(" ", "") + '>' + bn[i] + '</button>');
        $('#table-addon').parent().prepend(btn[0]);
      });
    },

        createButton: function(divID,func,txt,cls){
            var button=$('<button/>',
                {
                    text: txt,
                    click: func
                }).addClass(cls);
            $(divID).append(button);
        },

        addOnAttributeContains: function(obj) {
            var i = this.addOnAttribute.length;
            while (i--) {
                if (this.addOnAttribute[i] == obj) {
                        return true;
                }
            }
            return false;
        },

        removeRelatedProduct: function(addOnId) {
            for (key in addOnCategory) {
                if (key != undefined) {
                    var att1 = addOnCategory[key].ParentAttribute.split(' ').join('_');
                    att1 = getConfigRef() + att1;
                    var att2 = addOnCategory[key].AddOnAttribute.split(' ').join('_');
                    var cnt = CS.countRelatedProducts(att1 + '_0');
                    var deleted = false;
                    if (cnt > 0) {
                        for (var i=0; i < cnt; i++) {
                            if (CS.getAttributeValue(att1 + '_' + i + ':' + att2 + '_0') === addOnId) {
                                CS.Service.removeRelatedProduct(att1 + '_' + i);
                                deleted = true;
                                break;
                            }
                        }
                        if (deleted) {
                            break;
                        }
                    }
                }
            }
        },

        getSelectedAddOns: function() {
            var selectedAddOns = [];
            var processed = [];
            for (key in addOnCategory) {
                if (key != undefined) {
                    var att1 = addOnCategory[key].ParentAttribute.split(' ').join('_');
                    att1 = getConfigRef() + att1;
                    var att2 = addOnCategory[key].AddOnAttribute.split(' ').join('_');
                    var cnt = CS.countRelatedProducts(att1 + '_0');
                    if (jQuery.inArray(att1, processed) == -1) {
                        processed.push(att1);

                        if (cnt > 0) {
                            for (var i=0; i < cnt; i++) {
                                selectedAddOns.push(CS.getAttributeValue(att1 + '_' + i + ':' + att2 + '_0'));
                            }
                        }
                    }
                }
            }
            var countedSelectedAddOns = {};
            selectedAddOns.forEach(function(x) { countedSelectedAddOns[x] = (countedSelectedAddOns[x] || 0)+1; });

            for (key in countedSelectedAddOns) {
                $('#table-addon input[name="' + key + '"]').val(countedSelectedAddOns[key]);
                var x = $('#table-addon input[value="' + key + '"]');
                if (x.length > 0) {
                    $('#table-addon input[value="' + key + '"]').get(0).checked = true;
                }

            }

            return countedSelectedAddOns;
        },

        /**
         * No longer used
         */
        addRelatedProduct: function(item, addOnAttribute, addOnId) {

            var synchroniser = CS.Util.callbackSynchroniser({
                success : function () {
                    CS.Service.addRelatedProduct(item.attributeReference, item.productId, function () {
                        afterDisplay();
                        var validationResult = CS.Service.validateCurrentConfig(true);

                        if (validationResult.isValid) {
                            var ref = CS.Service.getCurrentConfigRef(),
                                currentConfig = CS.Service.config[ref].config;

                            currentConfig[CS.Util.configuratorPrefix+'Configuration_Status__c'] = 'Valid';
                        }
                        CS.setAttribute(ref + ':' + addOnAttribute, addOnId);
                        CS.Service.saveAndContinue(function () {
                            afterDisplay();
                        });
                    });
                }
            });

            //Load
            var productIndex = CS.Service.getProductIndex(item.productId);
            if (!productIndex) {
                synchroniser.register('Load Product Model ' + item.productId, function () {
                    CS.Service.loadProduct(item.productId, function () {
                        productIndex = CS.Service.getProductIndex(item.productId);
                        synchroniser.register('Load Product Templates ' + item.productId, function () {
                            CS.Service.loadProductTemplateHtml(item.productId, function () {
                                jQuery.extend(CS.screens, CS.DataBinder.prepareScreenTemplates(productIndex));
                                synchroniser.complete('Load Product Templates ' + item.productId);
                            });
                        });
                        synchroniser.complete('Load Product Model ' + item.productId);
                    });
                });
            }

            synchroniser.start('Loading products');
        },

        saveData: function() {
            var data = JSON.parse(Widget.AddOn.receivedJSON);
            var saveDiffer = this.saveDifference();
            for (var i = 0; i < saveDiffer.addOnsToRemove.length; i++) {
                this.removeRelatedProduct(saveDiffer.addOnsToRemove[i]);
            }
            this.createRelatedProducts(saveDiffer.addOnsToCreate);


        },

        saveDifference: function() {
            var selectedAddOns = [];
            var processed = [];
            for (key in addOnCategory) {
                if (key != undefined) {
                    var att1 = addOnCategory[key].ParentAttribute.split(' ').join('_');
                    att1 = getConfigRef() + att1;
                    var att2 = addOnCategory[key].AddOnAttribute.split(' ').join('_');
                    var cnt = CS.countRelatedProducts(att1 + '_0');
                    if (jQuery.inArray(att1, processed) == -1) {
                        processed.push(att1);
                        if (cnt > 0) {
                            for (var i=0; i < cnt; i++) {
                                selectedAddOns.push(CS.getAttributeValue(att1 + '_' + i + ':' + att2 + '_0'));
                            }
                        }
                    }
                }
            }


            var countedSelectedAddOns = {};
            selectedAddOns.forEach(function(x) { countedSelectedAddOns[x] = (countedSelectedAddOns[x] || 0)+1; });

            var list2=[];
            $('#table-addon input[type=checkbox]').each(function(index, value) {
                if (this.checked) {
                    list2.push(this.value);
                }
            });
            $('#table-addon input[type=number]').each(function(index, value) {
                if (this.value > 0) {
                    for(var i = 0; i < this.value; i++){
                        list2.push(this.name);
                    }
                }
            });
            var countNewSelectedAddOns = {};
            list2.forEach(function(x) { countNewSelectedAddOns[x] = (countNewSelectedAddOns[x] || 0)+1; });
            var addOnsToRemove = [];
            var addOnsToCreate = [];
            for (var key in countNewSelectedAddOns) {
                if (key != undefined) {
                    if (key in countedSelectedAddOns) {
                        var diff = countNewSelectedAddOns[key] - countedSelectedAddOns[key];
                        if (diff > 0) {
                            for (var i = 0; i < diff; i++) {
                                addOnsToCreate.push(key);
                            }
                        } else if (diff < 0) {
                            for (var i = 0; i < (diff * (-1)); i++) {
                                addOnsToRemove.push(key);
                            }
                        }
                    } else {
                        var diff = countNewSelectedAddOns[key];
                        for (var i = 0; i < diff; i++) {
                            addOnsToCreate.push(key);
                        }
                    }
                }
            }
            for (var key in countedSelectedAddOns) {
                if (key != undefined) {
                    if (key in countNewSelectedAddOns) {
                    } else {
                        var diff = countedSelectedAddOns[key];
                        for (var i = 0; i < diff; i++) {
                            addOnsToRemove.push(key);
                        }
                    }
                }
            }
            var retVal = {};
            retVal.addOnsToCreate = addOnsToCreate;
            retVal.addOnsToRemove = addOnsToRemove;
            return retVal;
        },

        /**
         * No longer used
         */
        handleSave: function (result, event) {
            var category = addOnCategory;
            $("#message").fadeIn("slow");
        },

        /**
         * No longer used
         */
        cancel: function(){
            //cancel
        },

        createRelatedProducts: function(addOns) {
            function populateScreens(productId, config) {
                var productIndex = CS.Service.getProductIndex(productId),
                    screensByProduct = productIndex.screensByProduct[productId],
                    configScreens = [],
                    idx = 0,
                    attrRefsByDef = {},
                    newAttrDefs = productIndex.attributeDefsByProduct[productId],
                    defId,
                    attrContext = {ref: '', index: 0};

                for (defId in newAttrDefs) {
                    ref = CS.Util.generateReference(newAttrDefs[defId].Name, attrContext);
                    attrRefsByDef[defId] = ref;
                }

                for (idx in screensByProduct) {
                    var screen = screensByProduct[idx],
                        attrs = productIndex.attributeDefsByScreen[screen.Id],
                        attrRefs = [];

                    for (var attrId in attrs) {
                        attrRefs.push(attrRefsByDef[attrId]);
                    }

                    configScreens[idx] = {
                        id: screen.Id,
                        reference: screen._reference,
                        attrs: attrRefs
                    };
                }

                config.screens = configScreens;
            }

            function validateScreens(data, spec, highlight) {
                var index = CS.Service.getProductIndex(),
                    result = {
                        isValid: true,
                        fieldErrors: {},
                        screens: {}
                    },
                    configRef = typeof spec === 'object' ? spec.reference : spec,
                    screenIndex = typeof spec === 'object' ? spec.index : undefined,
                    wrapper = data[configRef],
                    screens = wrapper ? wrapper.screens : undefined;

                if (highlight === undefined) {
                    highlight = true;
                }

                if (!screens) {
                    CS.Log.error('No screens found for validation');
                    return result;
                }

                if (screenIndex || screenIndex === 0) {
                    result = doScreenValidation(data, screens[screenIndex], highlight, configRef);
                    if (highlight) {
                        wrapper.screens[screenIndex].validation = result;
                    }
                } else {
                    jQuery.each(screens, function (i, screen) {
                        var r = doScreenValidation(data, screen, highlight, configRef);
                        if (highlight) {
                            wrapper.screens[i].validation = r;
                        }
                        jQuery.extend(result.screens, r.screens);
                        if (!r.isValid) {
                            result.isValid = false;
                            if (highlight) {
                                jQuery.extend(result.fieldErrors, r.fieldErrors);
                            }
                        }
                    });
                }

                return result;
            }

            function doScreenValidation(data, screen, highlight, configRef) {
                var result = {
                        isValid: true,
                        fieldErrors: {},
                        screens: {}
                    };

                if (highlight === undefined) {
                    highlight = true;
                }

                result.screens[screen.id] = true;
                if (typeof configRef === 'undefined') {
                    configRef = CS.Service.getCurrentConfigRef();
                }

                var prefix = CS.Util.configuratorPrefix;
                jQuery.each(screen.attrs, function (i, ref) {
                    var attrRef = (configRef === '' ? ref : configRef+':'+ref),
                        it = data[attrRef],
                        valueField = prefix + 'Value__c',
                        fieldError = {validationError: false, validationMessage: undefined};

                    if (it && it.attr) {
                        var isRequiredActiveVisible = (it.attr[prefix + 'Is_Required__c'] && it.attr[prefix + 'is_active__c'] && ! it.attr[prefix + 'Hidden__c']);
                        if (isRequiredActiveVisible && isValueBlank(it)) {
                            fieldError.validationError = true;
                            fieldError.validationMessage = 'This value is required';
                        } else if (it.definition[prefix + 'Type__c'] === 'Related Product' &&
                                (it.relatedProducts instanceof Array) &&
                                it.relatedProducts.length > 0
                            ) {
                            for (var c = 0; c < it.relatedProducts.length; c++) {
                                var relatedConfig = it.relatedProducts[c].config;
                                if (relatedConfig[prefix + 'Configuration_Status__c'] !== 'Valid') {
                                    fieldError.validationError = true;
                                    fieldError.validationMessage = 'Related product attribute contains incomplete configurations';
                                    break;
                                }
                            }
                        }

                        result.fieldErrors[attrRef] = fieldError;
                        if (fieldError.validationError) {
                            result.screens[screen.id] = false;
                            result.isValid = false;
                        }
                        if (highlight) {
                            CS.binding.update(attrRef, result.fieldErrors[attrRef]);
                        }
                    }
                });

                return result;

                function isValueBlank(item) {
                    var valueField = prefix + 'Value__c';
                    var retValue = (item.attr[valueField] === null || item.attr[valueField] === '');

                    if (item.definition) {
                        if (item.definition[prefix + 'Type__c'] in {'Select List':'','Radio Button':''}) {
                            retValue = retValue || (item.attr[valueField] === CS.NULL_OPTION_VALUE);
                        } else if (item.definition[prefix + 'Type__c'] === 'Related Product') {
                            // Ignore the Value field contents, check only related products array's size
                            retValue = (item.relatedProducts.length < 1);
                        }
                    }

                    return retValue;
                }
            }

            function loadRulesForConfig(reference, productDef) {
                if (!CS.Rules.hasRules(reference)) {
                    var referenceField = CS.Util.configuratorPrefix + 'reference__c';
                    if (!productDef.hasOwnProperty(referenceField)) {
                        CS.Log.error('Could not find the field reference__c in the current product definition', productDef);
                        return;
                    }
                    if (productDef[referenceField] === null) {
                        CS.Log.error('Current product definition\'s reference is null ', productDef);
                        return;
                    }

                    var tpl = jQuery('#' + CS.Util.generateId(productDef[CS.Util.configuratorPrefix + 'reference__c']) + '__rules'),
                        rules,
                        idx = 0; // this will be for 'leaf' Attributes which presently will always be index 0 (this will change if attribute arrays are introduced using the leaf node index)

                    if (tpl.size() === 0) {
                        CS.Log.warn('Could not find rules template with reference: ' + productDef[referenceField]);
                    } else {
                        var ref = reference ? reference + ':' : '';
                        rules = tpl.get(0).innerHTML.replace(/%idx%/g, idx).replace(/(['"])%ctx%\1/g, function(match, $1) { return ($1 + reference + $1); }).replace(/%ctx%/g, ref);
                        CS.Rules.addRules(reference, rules);
                    }
                }
            }

            function updateAttribute(input) {
                var wrapper = CS.getAttributeWrapper(input.name);
                wrapper.attr['cscfga__Value__c'] = input.value;
                if (input.type === 'select-one') {
                    // CS.setAttributeValue(input.name, jQuery(input).find('option:selected').text(), false);
                    var value = jQuery(input).find('option:selected').text();
                    wrapper.attr['cscfga__Display_Value__c'] = value;
                } else {
                    // CS.setAttributeValue(input.name, input.value, false);
                    wrapper.attr['cscfga__Display_Value__c'] = input.value;
                }
            }

            function buildAttribute(def, context, selectOptions, attributeFields, addOnId, addOnName) {
                context = context || {};
                var prefix = CS.Util.configuratorPrefix;
                var wrapper = {
                    "attr": {
                        "attributes": {
                            "type": prefix + "Attribute__c"
                        }
                    },
                    "attributeFields": {},
                    "definitionId": def.Id,
                    "displayInfo": context.displayInfo || def[prefix + 'Type__c'],
                    "reference": CS.Util.generateReference(def.Name, context),
                    "relatedProducts": [],
                    "selectOptions": selectOptions
                };
                var typeInfo = {
                    'type': def[prefix + 'Data_Type__c'],
                    'scale': def[prefix + 'Scale__c']
                };

                wrapper.attr[prefix + "Attribute_Definition__c"] = def.Id;
                wrapper.attr[prefix + 'Cascade_value__c'] = def[prefix + 'Cascade_value__c'];
                wrapper.attr[prefix + 'Display_Value__c'] = (
                    def[prefix + 'Type__c'] === 'Calculation'
                        ? null
                        : CS.DataConverter.localizeValue(def[prefix + 'Default_Value__c'], typeInfo)
                );
                wrapper.attr[prefix + 'Hidden__c'] = def[prefix + 'Hidden__c'];
                wrapper.attr[prefix + 'is_active__c'] = true;
                wrapper.attr[prefix + 'Is_Line_Item__c'] = def[prefix + 'Is_Line_Item__c'];
                wrapper.attr[prefix + 'Is_Required__c'] = def[prefix + 'Required__c'];
                wrapper.attr[prefix + 'Line_Item_Sequence__c'] = def[prefix + 'Line_Item_Sequence__c'];
                wrapper.attr[prefix + 'Line_Item_Description__c'] = def[prefix + 'Line_Item_Description__c'];
                wrapper.attr.Name = def.Name;
                wrapper.attr[prefix + 'Price__c'] = def[prefix + 'Base_Price__c'] || 0;

                wrapper.attr[prefix + 'Value__c'] = (
                    def[prefix + 'Type__c'] === 'Calculation'
                        ? ''
                        : CS.DataConverter.normalizeValue(def[prefix + 'Default_Value__c'], typeInfo)
                );
                if (def.Name === addOnName) {
                    wrapper.attr[prefix + 'Value__c'] = addOnId;
                }
                wrapper.attr[prefix + 'Recurring__c'] = def[prefix + 'Recurring__c'];

                if (def[prefix + 'Type__c'] === 'Select List' && def[prefix + 'Default_Value__c'] && selectOptions) {
                    for (var i = 0; i < selectOptions.length; i++) {
                        if (selectOptions[i] == def[prefix + 'Default_Value__c']) {
                            wrapper.attr[prefix + 'Display_Value__c'] = selectOptions[i].Name;
                            break;
                        }
                    }
                }

                _.each(attributeFields, function(a) {
                    CS.Service.setAttributeField(wrapper, a.Name, a[prefix + 'Default_Value__c']);
                });


                return wrapper;
            }

            function getContext(ref, attrName, idx, parent) {
                return {ref: ref, attrName: attrName, index: (idx || 0), parent: parent};
            }

            function buildConfig(def, reference, context) {
                var wrapper = {
                    "reference": reference,
                    "config": {
                        "attributes": {
                            "type": "Product_Configuration__c"
                        }
                    }
                };
                var prefix = CS.Util.configuratorPrefix;
                wrapper.config[prefix + 'Attribute_Name__c'] = context.attrName;
                wrapper.config[prefix + 'Billing_Frequency__c'] = CS.getFrequencyValueForName(def[prefix + 'Default_Billing_Frequency__c']);
                wrapper.config[prefix + 'Contract_Term__c'] = def[prefix + 'Default_Contract_Term__c'];
                wrapper.config[prefix + 'Contract_Term_Period__c'] = CS.getPeriodValueForName(def[prefix + 'Default_Contract_Term_Period__c']);
                wrapper.config[prefix + 'Description__c'] = def[prefix + 'Description__c'];
                wrapper.config[prefix + 'Index__c'] = context.index;
                wrapper.config[prefix + 'Last_Screen_Index__c'] = 0;
                wrapper.config.Name = CS.Util.getFirstDefinedValue([def.Name, def[prefix + 'Description__c']]);
                wrapper.config[prefix + 'Product_Definition__c'] = def.Id;
                wrapper.config[prefix + 'Recurrence_Frequency__c'] = CS.getFrequencyValueForName(def[prefix + 'Default_Frequency__c']);
                wrapper.config[prefix + 'Configuration_Status__c'] = 'Incomplete';
                wrapper.config[prefix + 'Validation_Message__c'] = '';
                wrapper.config[prefix + 'Product_Family__c'] = (def.Name.length > 40) ? def.Name.substr(0, 40) : def.Name;

                return wrapper;
            }

            function createConfiguration(configData, anchorRef, newProductId, parent, addOnId, addOnName) {
                var ROOT_REFERENCE = '';
                var productIndex = CS.Service.getProductIndex(newProductId);

                if (!productIndex) {
                    throw 'Product index for ' + newProductId + ' not found';
                }

                var productDef = productIndex.productsById[newProductId],
                    wrapper = configData[anchorRef],
                    newAttrDefs = productIndex.attributeDefsByProduct[newProductId],
                    screensByProduct = productIndex.screensByProduct[newProductId],
                    configScreens = [],
                    idx = 0,
                    name,
                    newConfig = {},
                    context,
                    attr,
                    defId,
                    ref;

                if (anchorRef !== ROOT_REFERENCE && !wrapper) {
                    return error('Could not locate reference ', anchorRef, configData);
                }

                if (!productDef) {
                    return error('Could not find product definition for id', newProductId);
                }

                if (!newAttrDefs) {
                    return error('Could not find attribute definitions for product id', newProductId);
                }

                if (anchorRef === ROOT_REFERENCE) {
                    // root config
                    ref = anchorRef;
                } else {
                    // attaching a related product configuration to an attribute on the parent
                    idx = wrapper.relatedProducts.length;
                    name = wrapper.attr.Name;
                    ref = CS.Util.stripReference(anchorRef) + idx;
                }
                context = getContext(ref, name, idx, parent);

                newConfigWrapper = buildConfig(productDef, ref, context);

                CS.Log.info('Creating configuration for reference ' + ref);

                if (anchorRef !== ROOT_REFERENCE) {
                    // Link related product to parent and mark as unsaved
                    newConfigWrapper.parent = parent;
                    newConfigWrapper.unsaved = true;
                    var relatedProducts = wrapper.relatedProducts.slice(0);
                    relatedProducts[idx] = newConfigWrapper;
                    CS.binding.update(anchorRef, {
                        relatedProducts: relatedProducts
                    });
                }

                var attrContext = {
                    ref: context.ref,
                    index: 0
                };

                for (defId in newAttrDefs) {
                    attr = buildAttribute(newAttrDefs[defId], attrContext, productIndex.find('selectOptionsByAttribute', defId), productIndex.find('attributeFieldDefsByAttributeDef', defId), addOnId, addOnName);
                    attr.definition = productIndex.all[attr.definitionId];
                    configData[attr.reference] = attr;
                }

                populateScreens(newProductId, newConfigWrapper);

                if (configData[ref]) {
                    // Overlay config on parent attribute node in configuration for related product #0
                    jQuery.extend(configData[anchorRef], newConfigWrapper);
                } else {
                    configData[ref] = newConfigWrapper;
                }

                /*
                var linkedObjectPropertiesCacheKey = CS.Service.getLinkedObjectId() + '|' + newProductId;

                var linkedObjectPropertiesExist = CS.Util.isObject(configData[ref]['linkedObjectProperties']);
                var linkedObjectApiExists = (
                    CS.Service['loadLinkedObjectProperties'] instanceof Function
                    && CS.Service['getLinkedObjectId'] instanceof Function
                );

                if (linkedObjectPropertiesExist) {
                    // If cache key doesn't exist... (mind the negation operator)
                    if(!linkedObjectPropertiesCache.hasOwnProperty(linkedObjectPropertiesCacheKey)) {
                    linkedObjectPropertiesCache[linkedObjectPropertiesCacheKey] =
                        configData[ref]['linkedObjectProperties'];
                    }
                }

                // If there are no linked object properties... (mind the negation operator)
                if (!linkedObjectPropertiesExist && linkedObjectApiExists) {
                    function _loadLinkedObjectProperties() {
                    CS.Log.info('***** Loading linked object properties (deferred)...');

                    var deferred = Q.defer();

                    CS.Service.loadLinkedObjectProperties(
                        CS.Service.getLinkedObjectId(), newProductId,
                        function(linkedObjectProperties) {
                        if (!CS.Util.isObject(linkedObjectProperties)) {
                            linkedObjectProperties = {};
                        }
                        linkedObjectPropertiesCache[linkedObjectPropertiesCacheKey] =
                            configData[ref]['linkedObjectProperties'] =
                            linkedObjectProperties;
                        deferred.resolve();
                        }
                    );

                    return deferred.promise;
                    }

                    function _loadRulesForConfig() {
                    CS.Log.info('***** Loading rules for configuration (deferred)...');

                    var deferred = Q.defer();

                    loadRulesForConfig(ref, productDef);

                    return deferred.promise;
                    }

                    if (Util.isObject(linkedObjectPropertiesCache[linkedObjectPropertiesCacheKey])) {
                    CS.Log.info('***** Linked object properties cache hit, cache key: ', linkedObjectPropertiesCacheKey);
                    configData[ref]['linkedObjectProperties'] =
                        linkedObjectPropertiesCache[linkedObjectPropertiesCacheKey];
                    loadRulesForConfig(ref, productDef);
                    } else {
                    _loadLinkedObjectProperties()
                    .then(_loadRulesForConfig)
                    .fail(CS.Log.error);
                    }
                } else {

                */
                loadRulesForConfig(ref, productDef);
                // }

                return newConfigWrapper;
            }

            function relatedProductsRendered() {
                if (typeof CS.Service.config[''].bound !== 'undefined' && !CS.Service.config[''].bound) {
                    CS.Log.debug('Rebinding');
                    CS.binding = CS.DataBinder.bind(CS.Service.config, CS.Service.getProductIndex(), jQuery('#configurationContainer'));
                    CS.binding.on('afterUpdate', function(ref, properties, event) {
                        CS.Log.debug('After Update', ref, properties, event);
                        if (!CS.rulesTimer) {
                            CS.rulesTimer = window.setTimeout(function() {
                                CS.Rules.evaluateAllRules('after update: ' + ref);
                                CS.rulesTimer = undefined;
                            }, 400);
                        }
                    });
                    CS.Service.config[''].bound = true;
                }
            }

            function addRelatedProductInline(anchorRef, definitionId) {

                var params = {
                    ref: anchorRef,
                    id: definitionId
                };

                var availableProductOptions,
                    availableProducts = [],
                    index = CS.Service.getProductIndex();

                CS.Log.debug('Add related product...', params.ref);

                var availableProductOptions = CS.RPUtils.getSelectProductOptionsForAttrId(definitionId);
                var successFired = false;
                var synchroniser = CS.Util.callbackSynchroniser({
                    success: function() {
                        if(!successFired){
                            successFired = true;
                            console.log('prepareSelectProduct success call - availableProducts: ' + availableProducts)
                            prepareSelectProduct(params, availableProducts);
                        }
                    }
                });

                var productId = (availableProductOptions['ProductCategories'].length === 0 && availableProductOptions['ProductDefinitions'].length === 1) ? availableProductOptions["ProductDefinitions"][0]['Id'] : params.Id;
                var productIndex = CS.Service.getProductIndex(productId);
                if (!productIndex) {
                    synchroniser.register('Load Product Model ' + productId, function() {
                        CS.Service.loadProduct(productId, function() {
                            productIndex = CS.Service.getProductIndex(productId);
                            availableProducts.push(productIndex.all[productId]);

                            synchroniser.register('Load Product Templates ' + productId, function() {
                                CS.delegate.loadProductTemplateHtml(productId, function() {
                                    jQuery.extend(CS.screens, CS.DataBinder.prepareScreenTemplates(productIndex));
                                    synchroniser.complete('Load Product Templates ' + productId);
                                    console.log('prepareSelectProduct call - availableProducts: ' + availableProducts);
                                    if(!successFired){
                                        successFired = true;
                                        prepareSelectProduct(params, availableProducts);
                                    }
                                });
                            });

                            synchroniser.complete('Load Product Model ' + productId);
                            prepareSelectProduct(params, availableProducts);
                        });
                    });
                } else {
                    availableProducts.push(productIndex.all[productId]);
                }

                synchroniser.start('Loading products');

                function prepareSelectProduct(params, availableProducts) {
                    CS.Log.debug('availableProducts:', availableProducts);

                    if (availableProducts.length === 1) {
                        params.Id = availableProducts[0].Id;
                        doAddRelatedProductInline(params.ref, params.Id);
                    } else {
                        doAddRelatedProductInline(params.ref, params.Id);
                    }
                }
            }

            function doAddRelatedProductInline(anchorRef, productId, addOnId, addOnName, callback, containerSelector) {
                var products,
                    productDef,
                    parent = CS.Service.config[CS.Service.getCurrentConfigRef()],
                    anchorWrapper = CS.Service.config[anchorRef],
                    attrDef = CS.Service.getAttributeDefinitionForReference(anchorRef);

                if (!attrDef) {
                    return;
                }

                var prefix = CS.Util.configuratorPrefix;

                if (attrDef[prefix + 'Type__c'] != 'Related Product') {
                    CS.Log.error('Cannot add related product on Attribute of type ', attrDef[prefix + 'Type__c']);
                    return;
                }

                var min = attrDef[prefix + 'Min__c'];
                var max = attrDef[prefix + 'Max__c'];
                if (max == anchorWrapper.relatedProducts.length) {
                    CS.displayInfo('New item cannot be added - the maximum number of ' + anchorWrapper.definition.Name + ' records is ' + max);
                    return;
                }

                if (!productId) {
                    products = CS.Service.getAvailableProducts(anchorRef);
                    productId = products[0][prefix + 'Product_Definition__c'];
                }

                /*
                if (CS.UI) {
                    CS.UI.suspendUpdates();
                }
                */

                var initialAttrs = [];
                jQuery.each(CS.Service.config, function(key, value) {
                    initialAttrs.push(key);
                });

                var configWrapper = createConfiguration(CS.Service.config, anchorRef, productId, parent, addOnId, addOnName);

                // set proper config name for related product BUG-01451
                var numRelatedProducts = anchorWrapper.relatedProducts.length;
                var maxIndex = 0;
                var rpAttrName = attrDef['Name'];
                for (var i = 0; i < numRelatedProducts; i++) {
                    var rpPcName = anchorWrapper.relatedProducts[i].config['Name'];
                    if (rpPcName.indexOf(rpAttrName) === 0) {
                        rpPcName = rpPcName.substring(rpAttrName.length - 1);
                    }
                    var tokens = rpPcName.split(' ');
                    var lastToken = tokens[tokens.length - 1];
                    if (jQuery.isNumeric(lastToken)) {
                        var sufixIndex = parseInt(lastToken);
                        if (maxIndex < sufixIndex) {
                            maxIndex = sufixIndex;
                        }
                    }
                }
                maxIndex++;


                configWrapper.config.Name = attrDef['Name'] + ' ' + maxIndex;
                anchorWrapper.attr[prefix + 'Display_Value__c'] = configWrapper.config.Name;
                configWrapper.config[CS.Util.configuratorPrefix + 'Configuration_Status__c'] = 'Valid';
                CS.Service.config[''].bound = false;

                /*
                if (CS.UI) {
                    CS.UI.resumeUpdates();
                }
                */
            }

            ;
            for (var i = 0; i < addOns.length; i++) {
                for (var j = 0; j < Widget.AddOn.receivedJSONs.length; j++) {
                    var data = JSON.parse(Widget.AddOn.receivedJSONs[j]);
                    for (var k = 0; k < data.length; k++) {
                        if (data[k].Id == addOns[i]) {
                            var cat = addOnCategory[data[k].category];
                            var parentAtt = cat.ParentAttribute.split(' ').join('_') + '_0';
                            parentAtt = Widget.AddOn.getConfigRef() + parentAtt;
                            var childAtt = cat.AddOnAttribute;
                            var defId = CS.Service.getAvailableProducts(parentAtt)[0].cscfga__Product_Definition__c;
                            doAddRelatedProductInline(parentAtt, defId, addOns[i], childAtt, function() {}, {} )
                        }
                    }
                }
            }
            CS.Rules.evaluateAllRules();
            relatedProductsRendered();
            //doAddRelatedProductInline('Add_On_0', 'a0b24000001tWoe', 'a0p24000000v8LR', 'Add On Price Item Id', function() {}, {} );
        },

    }

</script>

</apex:component>