<apex:component controller="cscfga.UISupport">

    <apex:stylesheet value="{!URLFOR($Resource.cscfga__Indicator,'css/indicator.css')}"></apex:stylesheet>

    <style type="text/css">
        div.message {
            background-color: #ff9;
            border: 1px #993 solid;
            margin: 6px 0;
            padding: 4px;
            display: none;
        }

        div.message.visible {
            display: block;
        }

        div.info {
            color: #66c;
        }

        div.warning {
            color: #f33;
        }

        .panel {
            border-top: 1px #eee solid;
            -webkit-box-shadow: 4px 4px 8px 0px rgba(0,0,0,0.3);
            -moz-box-shadow: 4px 4px 8px 0px rgba(0,0,0,0.3);
            box-shadow: 4px 4px 8px 0px rgba(0,0,0,0.3);
            margin: 12px 0;
            padding: 12px;
        }

        #ConfigPageWrapper {
            position: relative;
        }
    </style>

    <div id="ConfigPageWrapper">
        <div id="indicatorContainer" style="top: 0;bottom: 0;right: 0;left: 0;position: absolute; display:none;">{!$Label.cscfga__embscr_Loading}</div>

        <c:ScreenList />

        <div id="CSValidationMessageBox" class="message warning panel">
            <div class="messageText">
                <h4>Warning:</h4>
                <span id="CSValidationMessage">Warning message</span>
            </div>
        </div>

        <div id="CSInfoMessageBox" class="message info panel">
            <div class="messageText">
                <span id="CSInfoMessage">Info message</span>
            </div>
        </div>

        <div id="configurationContainer" />

        <script type="text/javascript" src="{!URLFOR($Resource.cscfga__jshashtable)}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.cscfga__jQuery_min)}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.cscfga__jquery_numberformatter)}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.cscfga__Underscore)}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.cscfga__datejs,'date-en-GB.min.js')}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.cscfga__cs_min)}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.cscfga__cs_online)}"></script>
        <script type="text/javascript">
        var params = {
            basketId: '{!JSENCODE(basketId)}',
            configId: '{!JSENCODE(configId)}',
            definitionId: '{!JSENCODE(definitionId)}',
            linkedId: '{!JSENCODE(linkedId)}',
            retURL: '{!JSENCODE(retURL)}'
        };

        if (jQuery.browser.msie) {
            jQuery(document).ready(function() {
                jQuery('body').append('<div id="popupOverlay"><div id="lookupContainer"></div></div>');
            });
        }

        require(['src/cs-full'], function() {
                var prefix = CS.Util.configuratorPrefix;
                function getSelectedOptionPrice(wrapper, attributeValue) {
                    var def = wrapper.definition || CS.Service.getProductIndex().all[wrapper.definitionId];
                    var price = null;

                    for (var c = 0; c < wrapper.selectOptions.length; c++) {
                        var option = wrapper.selectOptions[c];
                        if (attributeValue === option[prefix + 'Value__c']) {
                            price = parseFloat(option[prefix + 'Price__c']);
                            break;
                        }
                    }

                    // If a price value is not a number, use a base price.
                    if (isNaN(price) && def.hasOwnProperty(prefix + 'Base_Price__c')) {
                        var basePrice = parseFloat(def[prefix + 'Base_Price__c']);
                        if (!isNaN(basePrice)) {
                            price = basePrice;
                        }
                    }

                    if (typeof price === 'number' && !isNaN(price)) {
                        price = CS.DataConverter.DATA_TYPE_CONVERTERS['Decimal'](price, 2);
                    } else {
                        price = undefined;
                    }

                    return price;
                }

                CS.DataBinder.registerHandler('Radio Button', (function UI_RadioButton() {

                    function updateElement(jEl, ref, value) {
                        //TODO
                        var options = jEl.find('input[type="radio"][name="' + ref + '__list"]');
                        jQuery.each(options, function(i, it) {
                            it.checked = (it.value == value);
                        });
                    }

                    return {
                        init: function(binding) {
                            var wrapper = binding.wrapper;
                            var attr = wrapper.attr;
                            var index = binding.dataBinder.getIndex();
                            var options = wrapper.selectOptions ? wrapper.selectOptions : index.find('selectOptionsByAttribute', attr[prefix + 'Attribute_Definition__c']);

                            this.setOptions(binding, options);
                            updateElement(jQuery(binding.element), binding.wrapper.reference, attr[prefix + 'Value__c']);
                        },

                        name: 'Radio Button',

                        setOptions: function(binding, newOptions) {
                            var options = binding.wrapper.selectOptions = [],
                                wrapper = binding.wrapper,
                                value = wrapper.attr[prefix + 'Value__c'],
                                i = 0,
                                newOption,
                                selectedOption;

                            if (wrapper.definition) {
                                newOptions = CS.DataConverter.getValidOptions(newOptions, wrapper.definition[prefix + 'Data_Type__c']);
                            }

                            while (newOptions && i < newOptions.length) {
                                newOption = newOptions[i++];
                                options.push(newOption);
                                if (newOption[prefix + 'Value__c'] == value) {
                                    selectedOption = newOption;
                                }
                            }

                            if (!selectedOption && options.length > 0) {
                                selectedOption = options[0];
                            }

                            wrapper.attr[prefix + 'Value__c'] = selectedOption ? selectedOption[prefix + 'Value__c'] : '';
                            wrapper.attr[prefix + 'Display_Value__c'] = selectedOption ? selectedOption.Name : '';

                            this.listHasChanged(binding);
                        },

                        listHasChanged: function(binding) {

                            if (binding.offScreen) {
                                return;
                            }

                            var wrapper = binding.wrapper,
                                    el = jQuery(binding.element),
                                    rbGroupName = el[0].id + '__list';
                                    options = wrapper.selectOptions,
                                    value = wrapper.attr[prefix + 'Value__c'];

                            el.html('');
                            jQuery.each(options, function(i, it) {

                                //TODO ok
                                var str = '<label class="radio" for="' + rbGroupName + i + '" >'
                                                + '<input class="custom-radio" data-toggle="radio" type="radio" name="' + rbGroupName
                                                    + '" id="' + rbGroupName + i + '" '
                                                    + 'value="' + it[prefix + 'Value__c'] + '" '
                                                    + (it[prefix + 'Value__c'] == wrapper.attr[prefix + 'Value__c'] ? 'checked="checked" ' : '')
                                                    + 'data-cs-sequence="' + it[prefix + 'Sequence__c'] + '" '
                                                    + 'data-cs-price="' + it[prefix + 'Price__c'] + '" '
                                                    + '/>'
                                                    + '<span class="icons"><span class="icon-unchecked"></span><span class="icon-checked"></span></span>'
                                                + it.Name
                                            + '</label>';

                                el.append(str);
                            });

                            //TODO ok
                            el.find('input[type="radio"][name="' + rbGroupName + '"]').change((function(ref){
                                return function(e) {
                                    binding.dataBinder.update(ref, {value: jQuery(binding.element).find('input[type="radio"][name="' + ref + '"]:checked').val()});
                                };
                            })(rbGroupName));

                        },

                        update: function(binding, properties, triggerEvent) {
                            if (properties.selectOptions) {
                                if (properties.selectOptions === 'reset') {
                                    properties.selectOptions = binding.dataBinder.getIndex().find('selectOptionsByAttribute', binding.wrapper.attr[prefix + 'Attribute_Definition__c']);
                                }
                                this.setOptions(binding, properties.selectOptions);
                            }
                        },

                        updateUI: function(binding, triggerEvent) {
                            var wrapper = binding.wrapper;
                            var displayHandler = {
                                updateDisplay: (function(ref) {
                                    return function(element, value, displayValue) {
                                        var el = jQuery(element);
                                        updateElement(el, ref, displayValue);
                                    };
                                })(binding.wrapper.reference),

                                markRequired: CS.UI.Effects.markRequired,

                                clearValidation: function(element) {
                                    //TODO
                                    jQuery(element).parents('[data-role="fieldcontain"]').removeClass('attributeError').find('.attributeErrorMessage').remove();
                                },

                                showValidation: function(element) {
                                    var wrapper = binding.wrapper,
                                        el,
                                        msg;

                                    //TODO
                                    if (wrapper.validationError) {
                                        el = jQuery(element);
                                        msg = wrapper.validationMessage || 'Please correct this entry';
                                        var errorContainer = el.parents('[data-role="fieldcontain"]').addClass('attributeError').find('p.attributeErrorMessage');
                                        if (errorContainer.size() === 0) {
                                            el.parents('[data-role="fieldcontain"]').append('<p class="attributeErrorMessage">' + msg + '</p>');
                                        } else {
                                            errorContainer.text(msg);
                                        }
                                    } else {
                                        this.clearValidation(element);
                                    }
                                }
                            };

                            CS.UI.Effects.processEffects(binding, displayHandler);

                            if (triggerEvent) el.change();
                        },

                        updateAttribute: function(wrapper, properties) {
                            // value may have changed due to new set of options
                            var value = properties.value || wrapper.attr[prefix + 'Value__c'];
                            var propsCopy = jQuery.extend({}, properties);

                            var options = wrapper.selectOptions;

                            var i = (typeof (options) != 'undefined' ? options.length : 0);
                            while (i--) {
                                if (options[i][prefix + 'Value__c'] === value) {
                                    wrapper.attr[prefix + 'Value__c'] = value;
                                    wrapper.attr[prefix + 'Display_Value__c'] = options[i].Name;

                                    propsCopy.price = getSelectedOptionPrice(wrapper, value);
                                    break;
                                }
                            }

                            delete propsCopy.value;
                            CS.DataBinder.applyProperties(wrapper, propsCopy);
                        }
                    };
                })(), true);

          var delegate = {
            getLinkedObjectId: function() {
                return '{!JSENCODE(linkedId)}';
            },

            loadConfiguration: function(id, definitionId, callback) {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.UISupport.getProductConfiguration}',
                    id,
                    function(result, event) {
                        try {
                            var configData = JSON.parse(result);
                            callback(definitionId, configData, '{!$RemoteAction.UISupport.loadLookupRecord}');
                        } catch (e) {
                            CS.Log.error('Could not load product configuration id ' + id + ': ' + e.message);
                        }
                    },
                    {escape: false}
                );
            },

            loadProductTemplateHtml: function(id, callback) {
                var json = Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.UISupport.getProductTemplate}',
                    id, '', template,
                    function(result, event) {
                        callback(JSON.parse(result).html);
                    },
                    {escape: false}
                );
            },

            loadDefinition: function(id, callback) {
                var json = Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.UISupport.getProductModel}',
                    id,
                    function(result, event) {
                        callback(JSON.parse(result));
                    },
                    {escape: false}
                );
            },

            loadLookupRecord: function(params, callback) {
                var json = Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.UISupport.loadLookupRecord}',
                    params,
                    function(result, event) {
                        callback(result);
                    },
                    {escape: false}
                );
            },

            loadLinkedObjectProperties: function(linkedObjectId, productDefinitionId, callback) {
                var json = Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.UISupport.getLinkedObjectProperties}',
                    linkedObjectId, productDefinitionId,
                    function(result, event) {
                        callback(JSON.parse(result));
                    },
                    {escape: false}
                );
            },

            lookupQuery: {!$RemoteAction.UISupport.lookupQuery},

            loadRelatedProductSelectionData: function(params, callback) {
                var json = Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.UISupport.getRelatedProductSelectionData}',
                    params,
                    function(result, event) {
                        callback(result);
                    },
                    {escape: false}
                );
            },

            storeConfiguration: function(payload, callback) {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.UISupport.storeConfigs}',
                    payload,
                    function(result, event) {
                        if (event.status) {
                            result._success = true;
                        } else {
                            if (!result) {
                                result = {};
                            }
                            result._success = false;
                            result._message = event.message;
                        }
                        callback(result, function redirect() {
                            window.location.href = CS.params.retURL;
                        });
                    }
                );
            }
          },
          template = '{!JSENCODE(template)}';

          CS.Settings = {
          };

          //AF temp
          CS.params = params;

          // set user language for number/date formatter
          if (typeof CS !== 'undefined' && CS['DataConverter'] instanceof Object) {
              CS.DataConverter.userLanguage = 'EN';
          }

          launchConfigurator(CS, delegate, params, function() {
              console.log('KK - loading');
              CSCustom.ScreenList.init(function() {
                //set buttons css
                jQuery('.CS_configButtons button:not(.hidden)').addClass('btn btn-primary');
                //CSCustom.WhatIfWidget.Manager.generate();
              });

          });

        });

        var finishWaitData = {
            elapsedTime: 0,
            tick: 100,
            timeout: 5000
        };
        function finish() {
            var _this = this;
            var _arguments = arguments;
            if (typeof CS.rulesTimer !== 'undefined') {
                finishWaitData.elapsedTime += finishWaitData.tick;
                if (finishWaitData.elapsedTime > finishWaitData.timeout) {
                    CS.Log.warn('finish() method timed out while waiting for rules to execute, continuing anyway...');
                } else {
                    CS.Log.debug('[' + finishWaitData.elapsedTime + '] Waiting for rules to finish... ');
                    setTimeout(function() { finish.apply(_this, _arguments); }, finishWaitData.tick);
                    return;
                }
            }

            finishWaitData.elapsedTime = 0;
            var validationResult = CS.Service.validateCurrentConfig(true);
            var configurationStatus = CS.getConfigurationProperty('', 'status');

            if (configurationStatus === 'Incomplete' || !(validationResult.isValid)) {
                updateFinishButtonUI(this);

                // There are validation errors within the configuration. The configuration can still be saved but the basket cannot be synchronised with an Opportunity until the errors have been corrected.
                CS.markConfigurationInvalid('{!$Label.cscfga__configuration_There_are_validation_errors}');
            } else {
                saveConfiguration(this);
            }
        }

        function saveConfiguration(buttonElement) {
            var basketSpec = {
                Id: params.basketId,
                linkedId: params.linkedId
            };
            if (typeof buttonElement === 'undefined') {
                buttonElement = this;
            }

            CS.Log.info('Persisting configuration...');
            CS.Service.persistConfiguration(basketSpec, (function(p){
                return function(result, redirectCallback) {
                    if (result._success) {
                        CS.Log.info('Configuration persisted');
                        var configId = result.configId || result.rootConfigIds.replace(/[\[\]&]|quot;/gi, '');
                        var basketId = result.basketId;

                        var returnToId = '/' + ((typeof basketId == 'string' && basketId != '') ? basketId : configId);

                        // Redirect the user's browser to the basket details page if the new basket was created
                        var isNewBasket = result.isNewBasket;
                        if (typeof isNewBasket === 'string' && isNewBasket.toLowerCase() === 'true') {
                            CS.Log.info('New basket created, redirecting to basket details page...');
                        } else if (p && typeof p['retURL'] === 'string' && p.retURL.trim() !== '') {
                            returnToId = p.retURL.trim();
                        }

                        if (returnToId.indexOf('http') !== 0) {
                            if (!location.origin) {
                                // IE9 fix - IE9 window.location object doesn't contain "origin" property
                                location.origin = location.protocol + "//" + location.hostname + (location.port ? ':' + location.port: '');
                            }
                            returnToId = location.origin + returnToId;
                        }
                        window.location.assign(returnToId);
                    } else {
                        CS.markConfigurationInvalid(result._message);
                        updateFinishButtonUI(buttonElement, true);
                    }
                }
            })(params)
            );
        }
        </script>

        <script type="text/html" id="CS.MultipleRelatedProduct__tpl">
        <%  var disabled = definition.Max__c && relatedProducts.length >= definition.Max__c ? 'disabled="disabled"' : '',
                prod,
                attRef,
                rowClass;
            var attr = anchor.attr;
            var isReadOnly = attr[CS.Util.configuratorPrefix + 'Is_Read_Only__c'];
            var isActive = attr[CS.Util.configuratorPrefix + 'is_active__c'];
            var isRequired = attr[CS.Util.configuratorPrefix + 'Is_Required__c'];
        %>
            <div class="apexp">
                <div class="individualPalette">
                    <div class="bootstrap-iso">
                        <div class="panel panel-success">
                            <div class="panel-heading clearfix">
                                <table border="0" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td class="pbTitle">
                                            <h2 class="mainTitle">
                                                <span><%= definition.Name %></span>
                                                <% if (isRequired) { %><span class="required">(Required)</span><% } %>
                                                <% if (isReadOnly) { %><span class="readOnly">(Read Only)</span><% } %>
                                            </h2>
                                        </td>
                                        <td class="pbButton ">
                                        <% if (isActive && ! isReadOnly) { %>
                                            <button <%= disabled %> class="add" data-cs-control="<%= anchor.reference %>" data-cs-ref="<%= anchor.reference %>" data-cs-action="addRelatedProduct" data-cs-type="add" data-role="none">New <%= definition.Name %></button>
                                        <% } %>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="pbBody">
        <% if (relatedProducts.length > 0) { %>
            <table class="list" data-cs-binding="<%= anchor.reference %>" data-cs-control="<%= anchor.reference %>" data-cs-type="list">
                <thead class="rich-table-thead">
                    <tr class="headerRow">
                        <th class="headerRow" style="width: 6em;">Action</th>
                        <th class="headerRow" style="width: 6em;">Status</th>
                        <th class="headerRow">Name</th>
        <%  for (var i = 0; i < cols.length; i++) {
                var spec = colSpecs[cols[i]]; %>
                    <th class="headerRow">
                        <%= spec.header %>
                    </th>
        <%  } %>
                    </tr>
                </thead>
        <%  for (var i = 0; i < relatedProducts.length; i++) {
                prod = relatedProducts[i];
                rowClass = 'dataRow ' + (i/2 == Math.floor(i/2) ? 'even ' : 'odd ') + (i == 0 ? 'first ' : '') + (i >= relatedProducts.length - 1 ? 'last' : '');
        %>
                <tr class="<%= rowClass %>" data-cs-ref="<%= prod.reference %>">
                    <td class="dataCell">
                    <% if (isActive && ! isReadOnly) { %>
                        <span data-cs-action="editRelatedProduct" data-cs-ref="<%= prod.reference %>">Edit</span> |
                        <span data-cs-action="removeRelatedProduct" data-cs-ref="<%= prod.reference %>">Del</span>
                    <% } %>
                    </td>
                    <td class="dataCell"><%= prod.config[CS.Util.configuratorPrefix + 'Configuration_Status__c'] %></td>
                    <td class="dataCell">
                      <span data-cs-action="editRelatedProduct" data-cs-ref="<%= prod.reference %>" data-cs-name="<%= prod.config.Name %>">
                        <%= prod.config.Name %>
                      </span>
                    </td>
        <%      for (var j = 0; j < cols.length; j++) {
                    if (colSpecs[cols[j]].ref != undefined) {
                        attRef = prod.reference + ':' + colSpecs[cols[j]].ref;
                    }
                    if (attRef != undefined) {
        %>
                    <td><%= CS.getAttributeDisplayValue(attRef) %></td>
        <%          }
                } %>
                </tr>
        <%  } %>
            </table>
        <% } else { %>
            <table class="list" data-cs-control="<%= anchor.reference %>" data-cs-type="list">
                <tr class="dataRow even first last">
                    <td class="dataCell">
                        No items to display
                    </td>
                </tr>
            </table>
        <% } %>
                        </div>
                            <div class="pbFooter secondaryPalette">
                                <div class="bg"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </script>

    </div>

    <!-- related product selection template START -->
    <div id="rpDialogContainer" style="display: none">

            <div class="bPageTitle">
                <div class="ptBody">
                    <div class="content">
                        <img src="/s.gif" alt="Rule" class="pageTitleIcon" title="Related Product Selection" />
                        <h1 class="pageType">Related Product Selection</h1>
                        <h2 class="pageDescription">Related Product Selection</h2>
                        <div class="blank">&nbsp;</div>
                    </div>
                </div>
            </div>

            <div id="" style="display: block">
                <div class="apexp">
                    <div class="Custom24Block">
                        <div id="rpdBreadcrumb" class=""></div>
                        <br />
                    </div>
                </div>
            </div>

            <div class="apexp">
                <div class="individualPalette">
                    <div class="Custom24Block">
                        <div class="bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette">
                            <div class="pbHeader">
                                <table border="0" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td class="pbTitle"><h2 class="mainTitle">{!$Label.cscfga__selcat_Select_Category}</h2></td>
                                    </tr>
                                </table>
                            </div>
                            <div class="pbBody">

                                <table class="list" data-cs-binding="" data-cs-control="" data-cs-type="list" cellpadding="0" cellspacing="0">
                                    <thead class="rich-table-thead">
                                        <tr class="headerRow">
                                            <th class="headerRow" width="50%">{!$Label.cscfga__selprodcat_Category_Name}</th>
                                            <th class="headerRow" width="50%">{!$Label.cscfga__selprodcat_Description}</th>
                                        </tr>
                                    </thead>
                                    <tbody id="rpSelectCategoryList">
                                    </tbody>
                                </table>

                            </div>
                            <div class="pbFooter secondaryPalette">
                                <div class="bg"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="apexp">
                <div class="individualPalette">
                    <div class="Custom24Block">
                        <div class="bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette">
                            <div class="pbHeader">
                                <table border="0" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td class="pbTitle"><h2 class="mainTitle">Select Product</h2></td>
                                    </tr>
                                </table>
                            </div>
                            <div class="pbBody">
                                <table class="list" data-cs-binding="" data-cs-control="" data-cs-type="list" cellspacing="0" cellpadding="0">
                                    <thead class="rich-table-thead">
                                        <tr class="headerRow">
                                            <th class="headerRow" width="50%">{!$Label.cscfga__selcat_Product_Name}</th>
                                            <th class="headerRow" width="50%">{!$Label.cscfga__selcat_prod_Description}</th>
                                        </tr>
                                    </thead>
                                    <tbody id="rpSelectProductDefinitionList">
                                    </tbody>
                                </table>
                            </div>
                            <div class="pbFooter secondaryPalette">
                                <div class="bg"></div>
                            </div>
                        </div>
                    </div>
                    <div id="" class="">
                        <input id="rpCancelButton" type="button" value="{!$Label.cscfga__selcat_Cancel}" class="pbButtonb CS_configButtons"></input>
                    </div>
                </div>
            </div>

    </div>
    <!-- related product selection template END -->

</apex:component>