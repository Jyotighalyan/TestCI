/**
* @author Copyright(c) Amdocs Development Limited 2016. All rights reserved.
* @date 2016
* @description KenanAccount Unit Tests
*/
@isTest
private class KenanAccountTest {
	
	static KenanAccountItem getKenanAccountItem(String serviceExternalId, Integer serviceExternalIdType) {
		KenanAccountItem kenanAccountItem = new KenanAccountItem();

		Date today = Date.today();
		String annotation = 'annotation';
		String annotation2 = 'annotation2';
		String currencyCode = 'EUR';
		Date yearFromToday = Date.today().addYears(1);
		String instanceId = 'instanceId';
		String salesforceId = 'salesforceId';
		Integer itemId = 1;
		Integer itemType = 2;
		Integer rate = 10;
		Integer units = 1;
		String unitsType = 'unitsType';
		String nrcParentRcInstanceId = 'nrcParentRcInstanceId';
		Decimal discountAmount = 10;
		Decimal discountPercent = 10;
		Decimal unitCreditUnitsFree = 10;
		Decimal unitCreditAmountFree = 10;
		Integer contractLevel = 1;
		Integer serviceItemExternalIdType = 2;

		kenanAccountItem.serviceExternalIdType = serviceExternalIdType;
		kenanAccountItem.serviceExternalId = serviceExternalId;
		kenanAccountItem.activeDate = today; 
		kenanAccountItem.annotation = annotation;
		kenanAccountItem.annotation2 = annotation2;
		kenanAccountItem.currencyCode = currencyCode; 
		kenanAccountItem.inactiveDate = yearFromToday; 
		kenanAccountItem.instanceId = instanceId;
		kenanAccountItem.itemId = itemId;
		kenanAccountItem.itemType = itemType;
		kenanAccountItem.rate = rate;
		kenanAccountItem.salesforceId = salesforceId;
		kenanAccountItem.units = units;
		kenanAccountItem.unitsType = unitsType;
		kenanAccountItem.nrcParentRcInstanceId = nrcParentRcInstanceId;
		kenanAccountItem.discountAmount = discountAmount; 
		kenanAccountItem.discountPercent = discountPercent; 
		kenanAccountItem.unitCreditUnitsFree = unitCreditUnitsFree;
		kenanAccountItem.unitCreditAmountFree = unitCreditAmountFree;
		kenanAccountItem.contractLevel = contractLevel;

		return kenanAccountItem;
	}

	@isTest
	static void testProperties() {
		Datetime curDateTime = DateTIme.now();
		Test.startTest();
		KenanAccount ka = new KenanAccount();
		ka.salesforceOrgId = '123456789';
		ka.salesforceObjectId = '987';
		ka.accountCategory = 'SME';
		ka.accountInternalId = 2;
		ka.accountType = '5';
		ka.acctSegId = '15000';
		ka.altCompanyName = '7';
		ka.altFname = '8';
		ka.altLname = '9';
		//ka.autoWriteoffStatus = 10;
		ka.billAddress1 = '11';
		ka.billAddress2 = '12';
		ka.billAddress3 = '13';
		ka.billCity = '14';
		ka.billCompany = '15';
		ka.billCountryCode = 16;
		ka.billCounty = '17';
		ka.billDispMeth = 'E-Mail PDF';
		ka.billFmtOpt = 'Summary';
		ka.billFname = '2';
		ka.billFranchiseTaxCode = 2;
		//ka.billGeocode = '2';
		//ka.billHoldCode = 2;
		//ka.billingFrequency = 2;
		ka.billLname = '2';
		ka.billMinit = '2';
		ka.billNameGeneration = '2';
		ka.billNamePre = '2';
		ka.billPeriod = '2';
		//ka.billSequenceNum = 2;
		ka.billState = '2';
		ka.billTitle = '2';
		ka.billZip = '2';
		//ka.chargeThreshold = 2;
		//ka.chgWho = '2';
		//ka.childCount = 2;
		ka.codeword = '2';
		//ka.collectionHistory = '2';
		//ka.collectionIndicator = 2;
		//ka.collectionStatus = 2;
		ka.contact1Name = '2';
		ka.contact1Phone = '2';
		ka.contact2Name = '2';
		ka.contact2Phone = '2';
		//ka.converted = 2;
		//ka.creditRating = 2;
		//ka.creditThresh = 2;
		//ka.credStatus = 2;
		ka.currencyCode = 'Korean Won';
		ka.custAddress1 = '2';
		ka.custAddress2 = '2';
		ka.custAddress3 = '2';
		ka.custCity = '2';
		ka.custCountryCode = 2;
		ka.custCounty = '2';
		ka.custEmail = '2';
		ka.custFaxno = '2';
		//ka.custFranchiseTaxCode = 2;
		//ka.custGeocode = '2';
		//ka.customerLifetimeId = 2;
		//ka.customerLifetimeId2 = 2;
		ka.custPhone1 = '2';
		ka.custPhone2 = '2';
		ka.custState = '2';
		ka.custZip = '2';
		//ka.cyclicalThreshold = 2;
		ka.dateActive = curDateTime;
		ka.dateInactive = curDateTime.addDays(2);
		ka.dept = '2';
		//ka.disconnectReason = 2;
		//ka.discRcvOpt = 2;
		//ka.distrChan = '2';
		ka.exrateClass = 2;
		ka.gender = 2;
		//ka.globalContractStatus = 2;
		//ka.hierarchyAccountExternalId = '2';
		//ka.hierarchyAccountExternalIdType = 2;
		//ka.hierarchyId = 2;
		//ka.insertGrpId = 2;
		//ka.inUse = '2';
		//ka.languageCode = 2;
		ka.mktCode = 'MASTER ACCOUNT';
		//ka.msgGrpId = 2;
		//ka.noBill = true;
		//ka.owningCostCtr = 2;
		ka.parentAccountExternalId = '2';
		ka.parentAccountExternalIdType = 2;
		//ka.parentId = 2;
		//ka.paymentProfileId = 2;
		//ka.planIdCredit = 2;
		//ka.planIdDiscount = 2;
		//ka.prevBalanceRefno = 2;
		//ka.prevBalanceRefResets = 2;
		//ka.prevBillRefno = 2;
		//ka.prevBillRefResets = 2;
		//ka.purchaseOrder = '2';
		ka.rateClassDefault = 'Default product group';
		ka.rateClassSpecial = 1;
		//ka.regulatoryId = 2;
		//ka.remark = '2';
		//ka.revRcvCostCtr = 2;
		ka.salesCode = '2';
		//ka.sdAgencyId = '2';
		ka.sicCode = 2;
		ka.ssn = '2';
		ka.statementToEmail = '2';
		ka.statementToFaxno = '2';
		//ka.threshold = 2;
		//ka.threshRef = 2;
		//ka.tieCode = 2;
		ka.title = '2';
		//ka.usgAmtLimit = 2;
		//ka.usgUnitsLimit = 2;
		ka.vipCode = 2;
		ka.paymentProfile = new KenanPaymentProfile();
		ka.extIdList = new List<Map<String, String>>();
		ka.extData = new Map<String, String>();

		List<KenanAccountItem> accountItems = new List<KenanAccountItem>();

		for (Integer i = 0; i < 3; i++) {
			accountItems.add(getKenanAccountItem(String.valueOf(i), 2));
		}

		ka.accountItems = accountItems;

		Test.stopTest();
		System.assertEquals(ka.salesforceOrgId, '123456789');
		System.assertEquals(ka.salesforceObjectId, '987');
		System.assertEquals(ka.accountCategory, 'SME');
		System.assertEquals(ka.accountInternalId, 2);
		//System.assertEquals(ka.accountProcessFlag, 3);
		//System.assertEquals(ka.accountStatus, 4);
		//System.assertEquals(ka.accountStatusDt, Date.today());
		System.assertEquals(ka.accountType, '5');
		System.assertEquals(ka.acctSegId, '15000');
		System.assertEquals(ka.altCompanyName, '7');
		System.assertEquals(ka.altFname, '8');
		System.assertEquals(ka.altLname, '9');
		//System.assertEquals(ka.autoWriteoffStatus, 10);
		System.assertEquals(ka.billAddress1, '11');
		System.assertEquals(ka.billAddress2, '12');
		System.assertEquals(ka.billAddress3, '13');
		System.assertEquals(ka.billCity, '14');
		System.assertEquals(ka.billCompany, '15');
		System.assertEquals(ka.billCountryCode, 16);
		System.assertEquals(ka.billCounty, '17');
		System.assertEquals(ka.billDispMeth, 'E-Mail PDF');
		System.assertEquals(ka.billFmtOpt, 'Summary');
		System.assertEquals(ka.billFname, '2');
		System.assertEquals(ka.billFranchiseTaxCode, 2);
		//System.assertEquals(ka.billGeocode, '2');
		//System.assertEquals(ka.billHoldCode, 2);
		//System.assertEquals(ka.billingFrequency, 2);
		System.assertEquals(ka.billLname, '2');
		System.assertEquals(ka.billMinit, '2');
		System.assertEquals(ka.billNameGeneration, '2');
		System.assertEquals(ka.billNamePre, '2');
		System.assertEquals(ka.billPeriod, '2');
		//System.assertEquals(ka.billSequenceNum, 2);
		System.assertEquals(ka.billState, '2');
		System.assertEquals(ka.billTitle, '2');
		System.assertEquals(ka.billZip, '2');
		//System.assertEquals(ka.chargeThreshold, 2);
		//System.assertEquals(ka.chgWho, '2');
		//System.assertEquals(ka.childCount, 2);
		System.assertEquals(ka.codeword, '2');
		//System.assertEquals(ka.collectionHistory, '2');
		//System.assertEquals(ka.collectionIndicator, 2);
		//System.assertEquals(ka.collectionStatus, 2);
		System.assertEquals(ka.contact1Name, '2');
		System.assertEquals(ka.contact1Phone, '2');
		System.assertEquals(ka.contact2Name, '2');
		System.assertEquals(ka.contact2Phone, '2');
		//System.assertEquals(ka.converted, 2);
		//System.assertEquals(ka.creditRating, 2);
		//System.assertEquals(ka.creditThresh, 2);
		//System.assertEquals(ka.credStatus, 2);
		System.assertEquals(ka.currencyCode, 'Korean Won');
		System.assertEquals(ka.custAddress1, '2');
		System.assertEquals(ka.custAddress2, '2');
		System.assertEquals(ka.custAddress3, '2');
		System.assertEquals(ka.custCity, '2');
		System.assertEquals(ka.custCountryCode, 2);
		System.assertEquals(ka.custCounty, '2');
		System.assertEquals(ka.custEmail, '2');
		System.assertEquals(ka.custFaxno, '2');
		//System.assertEquals(ka.custFranchiseTaxCode, 2);
		//System.assertEquals(ka.custGeocode, '2');
		//System.assertEquals(ka.customerLifetimeId, 2);
		//System.assertEquals(ka.customerLifetimeId2, 2);
		System.assertEquals(ka.custPhone1, '2');
		System.assertEquals(ka.custPhone2, '2');
		System.assertEquals(ka.custState, '2');
		System.assertEquals(ka.custZip, '2');
		//System.assertEquals(ka.cyclicalThreshold, 2);
		System.assertEquals(ka.dateActive, curDateTime);
		System.assertEquals(ka.dateInactive, curDateTime.addDays(2));
		System.assertEquals(ka.dept, '2');
		//System.assertEquals(ka.disconnectReason, 2);
		//System.assertEquals(ka.discRcvOpt, 2);
		//System.assertEquals(ka.distrChan, '2');
		System.assertEquals(ka.exrateClass, 2);
		System.assertEquals(ka.gender, 2);
		//System.assertEquals(ka.globalContractStatus, 2);
		//System.assertEquals(ka.hierarchyAccountExternalId, '2');
		//System.assertEquals(ka.hierarchyAccountExternalIdType, 2);
		//System.assertEquals(ka.hierarchyId, 2);
		//System.assertEquals(ka.insertGrpId, 2);
		//System.assertEquals(ka.inUse, '2');
		//System.assertEquals(ka.languageCode, 2);
		System.assertEquals(ka.mktCode, 'MASTER ACCOUNT');
		//System.assertEquals(ka.msgGrpId, 2);
		//System.assertEquals(ka.noBill, true);
		//System.assertEquals(ka.owningCostCtr, 2);
		System.assertEquals(ka.parentAccountExternalId, '2');
		System.assertEquals(ka.parentAccountExternalIdType, 2);
		//System.assertEquals(ka.parentId, 2);
		//System.assertEquals(ka.paymentProfileId, 2);
		//System.assertEquals(ka.planIdCredit, 2);
		//System.assertEquals(ka.planIdDiscount, 2);
		//System.assertEquals(ka.prevBalanceRefno, 2);
		//System.assertEquals(ka.prevBalanceRefResets, 2);
		//System.assertEquals(ka.prevBillRefno, 2);
		//System.assertEquals(ka.prevBillRefResets, 2);
		//System.assertEquals(ka.purchaseOrder, '2');
		System.assertEquals(ka.rateClassDefault, 'Default product group');
		System.assertEquals(ka.rateClassSpecial, 1);
		//System.assertEquals(ka.regulatoryId, 2);
		//System.assertEquals(ka.remark, '2');
		//System.assertEquals(ka.revRcvCostCtr, 2);
		System.assertEquals(ka.salesCode, '2');
		//System.assertEquals(ka.sdAgencyId, '2');
		System.assertEquals(ka.sicCode, 2);
		System.assertEquals(ka.ssn, '2');
		System.assertEquals(ka.statementToEmail, '2');
		System.assertEquals(ka.statementToFaxno, '2');
		//System.assertEquals(ka.threshold, 2);
		//System.assertEquals(ka.threshRef, 2);
		//System.assertEquals(ka.tieCode, 2);
		System.assertEquals(ka.title, '2');
		//System.assertEquals(ka.usgAmtLimit, 2);
		//System.assertEquals(ka.usgUnitsLimit, 2);
		System.assertEquals(ka.vipCode, 2);
		System.assertNotEquals(ka.paymentProfile, null);
		System.assertNotEquals(ka.extIdList, null);
		System.assertNotEquals(ka.extData, null);
		System.assertNotEquals(ka.extData, null);
		System.assertNotEquals(null, ka.accountItems);
		System.assert(!ka.accountItems.isEmpty());

		Integer serviceExternalIdType = 2;
		Date today = Date.today();
		String annotation = 'annotation';
		String annotation2 = 'annotation2';
		String currencyCode = 'EUR';
		Date yearFromToday = Date.today().addYears(1);
		String instanceId = 'instanceId';
		String salesforceId = 'salesforceId';
		Integer itemId = 1;
		Integer itemType = 2;
		Integer rate = 10;
		Integer units = 1;
		String unitsType = 'unitsType';
		String nrcParentRcInstanceId = 'nrcParentRcInstanceId';
		Decimal discountAmount = 10;
		Decimal discountPercent = 10;
		Decimal unitCreditUnitsFree = 10;
		Decimal unitCreditAmountFree = 10;
		Integer contractLevel = 1;
		Integer serviceItemExternalIdType = 2;

		for (Integer i = 0; i < ka.accountItems.size(); i++) {
			KenanAccountItem kenanAccountItem = ka.accountItems.get(i);

			System.assertEquals(serviceExternalIdType, kenanAccountItem.serviceExternalIdType);
			System.assertEquals(String.valueOf(i), kenanAccountItem.serviceExternalId);
			System.assertEquals(today, kenanAccountItem.activeDate);
			System.assertEquals(annotation, kenanAccountItem.annotation);
			System.assertEquals(annotation2, kenanAccountItem.annotation2);
			System.assertEquals(currencyCode, kenanAccountItem.currencyCode);
			System.assertEquals(yearFromToday, kenanAccountItem.inactiveDate);
			System.assertEquals(instanceId, kenanAccountItem.instanceId);
			System.assertEquals(itemId, kenanAccountItem.itemId);
			System.assertEquals(itemType, kenanAccountItem.itemType);
			System.assertEquals(rate, kenanAccountItem.rate);
			System.assertEquals(salesforceId, kenanAccountItem.salesforceId);
			System.assertEquals(units, kenanAccountItem.units);
			System.assertEquals(unitsType, kenanAccountItem.unitsType);
			System.assertEquals(nrcParentRcInstanceId, kenanAccountItem.nrcParentRcInstanceId);
			System.assertEquals(discountAmount, kenanAccountItem.discountAmount);
			System.assertEquals(discountPercent, kenanAccountItem.discountPercent);
			System.assertEquals(unitCreditUnitsFree, kenanAccountItem.unitCreditUnitsFree);
			System.assertEquals(unitCreditAmountFree, kenanAccountItem.unitCreditAmountFree);
			System.assertEquals(contractLevel, kenanAccountItem.contractLevel);
		}
	}
	
}