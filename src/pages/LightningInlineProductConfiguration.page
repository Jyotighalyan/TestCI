<apex:page doctype="html-5.0" standardcontroller="cscfga__Product_Basket__c" extensions="cscfga.UISupport"
    showHeader="false" sidebar="false" title="Edit Product Configuration" action="{!checkRuntimeVersion}">

    <cscfga:FixUIStyles />

    <apex:stylesheet value="{!$Resource.cscfga__Configuration_css}"/>
    <apex:stylesheet value="{!URLFOR($Resource.cscfga__select2,'select2.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.cscfga__Indicator,'css/indicator.css')}"></apex:stylesheet>
    <div id="indicatorContainer" style="top: 0;bottom: 0;right: 0;left: 0;position: absolute; display:none;">{!$Label.cscfga__embscr_loading}</div>
    <c:CSSE_GenericFlatui >
    </c:CSSE_GenericFlatui>
    <c:ScreenList />

    <div id="CSValidationMessageBox" class="message warningM3">
        <table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">
            <tr valign="top">
                <td>
                    <img alt="WARNING" class="msgIcon" src="/s.gif" title="WARNING" />
                </td>
                <td class="messageCell">
                    <div class="messageText">
                        <h4>Warning:</h4>
                        <span id="CSValidationMessage"></span>
                    </div>
                </td>
            </tr>
            <tr>
                <td></td>
                <td></td>
            </tr>
        </table>
    </div>

    <div id="CSInfoMessageBox" class="message infoM3">
        <table border="0" cellpadding="0" cellspacing="0" class="messageTable" style="padding:0px;margin:0px;">
            <tr valign="top">
                <td>
                    <img alt="INFO" class="msgIcon" src="/s.gif" title="INFO" />
                </td>
                <td class="messageCell">
                    <div class="messageText">
                        <div id="CSInfoMessage"></div>
                    </div>
                </td>
            </tr>
            <tr>
                <td></td>
                <td></td>
            </tr>
        </table>
    </div>

    <!--
    ################################################
    # Dummy input date field to enable hand-rolled
    # date pickers to be built dynamically. Adding
    # this control forces SF to build the DatePicker
    # table at the end of the page containing the
    # content for the datepicker div.
    ################################################
    -->
    <div id="configurationContainer" />

    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__jshashtable)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.jquery112)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.jquery_migrate_141)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__jquery_numberformatter)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__Underscore)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__select2,'select2.min.js')}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__datejs,'date-en-GB.min.js')}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__datejs,'date-' & userLocale & '.min.js')}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__cs_js)}/require.js"></script>
    <script type="text/javascript">require.config({baseUrl: '{!JSENCODE(URLFOR($Resource.cscfga__cs_js))}'});</script>
    <script type="text/javascript" src="{!URLFOR($Resource.cscfga__cs_online)}"></script>

    <script type="text/javascript">

        var params = {
            basketId: '{!JSENCODE(basketId)}',
            configId: '{!JSENCODE(configId)}',
            definitionId: '{!JSENCODE(definitionId)}',
            linkedId: '{!JSENCODE(linkedId)}',
            retURL: '{!JSENCODE(retURL)}',
            packageSlotId: '{!JSENCODE(packageSlotId)}',
            isDtp: '{!JSENCODE(isDtp)}',
            screenflow: '{!JSENCODE(screenFlowName)}'
        };

        // Array with lookup product IDs
        var relatedProductsIds = new Array( );
        var lookups = false;

        // Renders lookups controls (Select2 drop down list)
        var renderLookups = function() {

            console.log('Debug: Rendering lookups; timestamp: ' + Date.now());
            for (var i = 0; i < relatedProductsIds.length; i++) {
                ClientCustom.sllInit(relatedProductsIds[i]);
            }
        }

        var renderTimer = function () {

            var rel  = document.getElementById('relatedListTableID');

            if (rel && lookups && $('#relatedListTableID div[class*="select2-container"]').size() === 0 && relatedProductsIds) {

                renderLookups();

                /*if (!(CS.rulesTimer == undefined && CS.lookupQueriesAreQueued() == false)) {

                    console.log('Debug: Clearing rtm');
                    clearInterval(rtm);
                }*/
            }
        }

        var rtm = setInterval(renderTimer, 200);

        if (navigator.userAgent.match(/msie [6]/i) && !window.XMLHttpRequest) {
            jQuery(document).ready(function() {
                jQuery('body').append('<div id="popupOverlay"><div id="lookupContainer"></div></div>');
            });
        }

        require(['./src/cs-full'], function() {
            CS.App.Components.Repository.addComponent('configurator','MultipleRelatedProduct', jQuery('#CS\\.MultipleRelatedProduct__tpl')[0]);
            CS.App.Components.Repository.addComponent('configurator','MultiSelectLookup', jQuery('#CS\\.MultiSelectLookup__tpl')[0]);

            var delegate = {
                getLinkedObjectId: function() { return '{!JSENCODE(linkedId)}'; },

                getScreenFlowName: function() { return '{!JSENCODE(screenFlowName)}'; },

                loadConfiguration: function(id, definitionId, callback) {
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.UISupport.getProductConfiguration}',
                        id,
                        function(result, event) {
                            try {
                                var configData = JSON.parse(result);
                                callback(definitionId, configData, '{!$RemoteAction.UISupport.loadLookupRecord}');
                            } catch (e) {
                                CS.Log.error('Could not load product configuration id ' + id + ': ' + e.message);
                            }
                        },
                        {escape: false}
                    );
                },

                loadProductTemplateHtml: function(id, screenFlowName, callback) {
                    if (typeof screenFlowName === 'function') {
                        callback = screenFlowName;
                        screenFlowName = '';
                    }
                    var json = Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.UISupport.getProductTemplate}',
                        id, screenFlowName, template,
                        function(result, event) {
                            if (event.status) {
                                callback(JSON.parse(result).html);
                            } else {
                                callback(new Error(event.message));
                            }
                        },
                        {escape: false}
                    );
                },

                loadDefinition: function(id, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.UISupport.getProductModel}',
                        id,
                        function(result, event) {
                            callback(JSON.parse(result));
                        },
                        {escape: false}
                    );
                },

                loadLinkedObjectProperties: function(linkedObjectId, productDefinitionId, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.UISupport.getLinkedObjectProperties}',
                        linkedObjectId, productDefinitionId,
                        function(result, event) {
                            callback(JSON.parse(result));
                        },
                        {escape: false}
                    );
                },

                lookupQuery: {!$RemoteAction.UISupport.lookupQuery},

                loadRelatedProductSelectionData: function(params, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.UISupport.getRelatedProductSelectionData}',
                        params,
                        function(result, event) {
                            callback(result);
                        },
                        {escape: false}
                    );
                },

                loadLookupRecord: function(params, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.UISupport.loadLookupRecord}',
                        params,
                        function(result, event) {
                            callback(result);
                        },
                        {escape: false}
                    );
                },

                loadCustomLookupReferencedAttributes: function(productDefinitionId, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.UISupport.loadCustomLookupReferencedAttributes}',
                        productDefinitionId,
                        function(result, event) {
                            callback(JSON.parse(result));
                        },
                        {escape: false}
                    );
                },

                getSelectListLookup: function(params, callback) {
                    var json = Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.UISupport.getSelectListLookup}',
                        JSON.stringify(params), '', '', '',
                        function(result, event) {
                            callback(result, event);
                        },
                        {escape: false}
                    );
                },

                storeConfiguration: function(payload, callback) {
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.UISupport.storeConfigs}',
                        payload,
                        function(result, event) {
                            if (event.status) {
                                result._success = true;
                            } else {
                                if (!result) {
                                    result = {};
                                }
                                result._success = false;
                                result._message = event.message;
                            }
                            callback(result, function redirect() {
                                window.location.href = CS.params.retURL;
                            });
                        }
                    );
                }

            },
            template = '{!JSENCODE(template)}';

            CS.Settings = {

            };

            CS.Labels = {
                "selectlistlookup_Please_select_value" : "{!$Label.cscfga__selectlistlookup_Please_select_value}",
                "selectlistlookup_Please_enter_search" : "{!$Label.cscfga__selectlistlookup_Please_enter_search}"
            };

            params.linkedId = CS.Util.stripIdFromUrl(params.linkedId);

            //AF temp
            CS.params = params;

            // set user language for number/date formatter
            if (typeof CS !== 'undefined' && CS['DataConverter'] instanceof Object) {
                CS.DataConverter.userLanguage = '{!userLanguage}';
            }

            launchConfigurator(CS, delegate, params, function() {
                // checkIfCSServiceIsLoaded();
                var date = CS.todayFormatted.split('/');
                CS.todayFormatted2 = date[1] + '/' + date[0] + '/' + date[2];

                CSCustom.ScreenList.init(function() {
                    //set buttons css
                    jQuery('.CS_configButtons button:not(.hidden)').addClass('btn btn-primary');
                    jQuery('[data-cs-group="ForceFinish"]').addClass('btn btn-primary');
                });

                setTimeout(function(){
                   jQuery('.CS_configButtons button:not(.hidden)').addClass('btn btn-primary');
                    jQuery('[data-cs-group="ForceFinish"]').addClass('btn btn-primary');
                }, 500);

                setTimeout(initializeWidgets, 500);
            });
        });

        // Action invoked on Finish button
        function finish() {

            var finishWaitData = {
                elapsedTime: 0,
                tick: 100,
                timeout: 5000
            };

            var _this = this;
            var _arguments = arguments;
            if (typeof CS.rulesTimer !== 'undefined') {
                finishWaitData.elapsedTime += finishWaitData.tick;
                if (finishWaitData.elapsedTime > finishWaitData.timeout) {
                    CS.Log.warn('finish() method timed out while waiting for rules to execute, continuing anyway...');
                } else {
                    CS.Log.debug('[' + finishWaitData.elapsedTime + '] Waiting for rules to finish... ');
                    setTimeout(function() { finish.apply(_this, _arguments); }, finishWaitData.tick);
                    return;
                }
            }

            finishWaitData.elapsedTime = 0;
            var validationResult = CS.Service.validateCurrentConfig(true);
            var configurationStatus = CS.getConfigurationProperty('', 'status');

            if (configurationStatus === '{!CONFIGURATION_STATUS_INVALID}' || !(validationResult.isValid)) {
                updateFinishButtonUI(this);

                // There are validation errors within the configuration. The configuration can still be saved but the basket cannot be synchronised with an Opportunity until the errors have been corrected.
                CS.markConfigurationInvalid('{!$Label.cscfga__configuration_There_are_validation_errors}');
            } else {
                saveConfiguration(this);
            }
        }

        // Save current configuration (Called from Finish button action)
        function saveConfiguration(buttonElement) {
            var basketSpec = {
                Id: params.basketId,
                linkedId: params.linkedId,
                packageSlotId: params.packageSlotId
            };
            if (typeof buttonElement === 'undefined') {
                buttonElement = this;
            }

            CS.Log.info('Persisting configuration...');
            CS.Service.persistConfiguration(basketSpec, (function(p){
                return function(result, redirectCallback) {
                    if (result._success) {
                        CS.Log.info('Configuration persisted');
                        window.location.assign(buildAfterFinishUrl(p, result));
                    } else {
                        CS.markConfigurationInvalid(result._message);
                        updateFinishButtonUI(buttonElement, true);
                    }
                }
            })(params));
        }

        // Inline Editing script

        var api = { };

        function getContext(ref, attrName, idx, parent) {
            return {ref: ref, attrName: attrName, index: (idx || 0), parent: parent};
        }

        function updateAttribute(input) {

            var invalue;

            if (input.type === 'select-one') {
                invalue = jQuery(input).find('option:selected').text();
            }
            else if (input.className && input.className.indexOf('select2') != -1) {
                invalue = input.value;
            } else {
                invalue = input.value;
            }

            CS.setAttributeValue(input.id, invalue, false);
            CS.Service.validateCurrentConfig(true);
            CS.Rules.evaluateAllRules('after update');
        }

        function loadProductModel(deferred, params) {
            CS.Service.loadProduct(params.productId, function() {
                var productIndex = CS.Service.getProductIndex(params.productId);
                if (params.availableProducts && params.availableProducts.push) {
                    params.availableProducts.push(productIndex.all[params.productId]);
                }

                jQuery.extend(CS.screens, CS.DataBinder.prepareScreenTemplates(productIndex));
                params.productIndex = productIndex;

                deferred.resolve(params);
            });
        }

        function startBusyIndicator(deferred, params) {
            if (CS.indicator && CS.indicator.start) {
                CS.indicator.start();
            }
            deferred.resolve(params);
        }

        /**
         * A custom handler for rejected promises, used in place of the default
         * error handler method to inform the user of incorrect behaviour during
         * adding or editing of related products
         */
        function errorHandler(e) {
            CS.Log.error(e);
            CS.displayInfo('Could not open related product: ' + e);
            if (CS.indicator && CS.indicator.stop) {
                CS.indicator.stop();
            }
        }

        function countRelatedProducts(anchorRef, value) {

            var config = CS.Service.config;
            var anchorWrapper = config[anchorRef];

            return anchorWrapper.relatedProducts.length;
        }

        /*
         * Add new inline related product
        */
        function addRelatedProduct(anchorRef, definitionId) {

            console.log('Debug: DefinitionId:' + definitionId);

            var prefix = CS.Util.configuratorPrefix;
            var localparams = {
                ref: anchorRef,
                id: definitionId
            };

            var availableProductOptions,
                availableProducts = [],
                index = CS.Service.getProductIndex();

            CS.Log.debug('Add related product...', localparams.ref);

            var availableProductOptions = CS.RPUtils.getSelectProductOptionsForAttrId(definitionId);
            var availableCategories = availableProductOptions['ProductCategories'];
            var availableDefinitions = availableProductOptions['ProductDefinitions'];

            var productId = (availableCategories.length === 0 && availableDefinitions.length === 1) ? availableDefinitions[0].Id : localparams.id;
            var productIndex = CS.Service.getProductIndex(productId);

            var self = this;
            var executionChain = CS.Util.getDeferred();
            var promise = CS.Util.getPromise(executionChain)
                .then(CS.Util.defer(startBusyIndicator, self));

            if (!productIndex) {
                promise = promise.then(CS.Util.defer(loadProductModel, self));
            } else {
                promise = promise.then(CS.Util.defer(function(d, p) {
                    p.productIndex = productIndex;
                    d.resolve(p);
                }, self));
                availableProducts.push(productIndex.all[productId]);
            }

            promise = promise.then(function success() {
                CS.Log.debug('availableProducts:', availableProducts);

                if (availableProducts.length === 1) {
                    localparams.id = availableProducts[0].Id;
                }

                return customAddRelatedProduct(prefix, localparams.ref, localparams.id, function() {});
            }).then(function() {
                return CS.Service.saveAndContinue();
            });

            CS.Util.onPromiseError(promise, errorHandler);
            executionChain.resolve({
                productId: productId,
                availableProducts: availableProducts
            });
        }

        /*
         * Called from addRelatedProduct (Implements Product Configuration creation and returns a promise)
        */
        function customAddRelatedProduct(prefix, anchorRef, productId, callback, containerSelector) {

            var config = CS.Service.config;

            var currentScreen = {
                reference: '',
                index: 0
            };

            var products,
                productDef,
                parent = config[currentScreen.reference],
                anchorWrapper = config[anchorRef],
                attrDef = CS.Service.getAttributeDefinitionForReference(anchorRef);

            console.log('Debug: AnchorWrapper: ' + anchorWrapper + ', anchorRef: ' + anchorRef);

            var executionChain = CS.Util.getDeferred();

            if (!attrDef) {
                executionChain.reject(new Error('Cannot find attribute definition for reference "' + anchorRef + '"'));
                return CS.Util.getPromise(executionChain);
            }

            if (attrDef[prefix + 'Type__c'] != 'Related Product') {
                executionChain.reject(new Error('Cannot add related product on Attribute of type ' + attrDef[prefix + 'Type__c']));
                return CS.Util.getPromise(executionChain);
            }

            var min = attrDef[prefix + 'Min__c'];
            var max = attrDef[prefix + 'Max__c'];

            if (max == anchorWrapper.relatedProducts.length) {
                executionChain.reject(new Error('New item cannot be added - the maximum number of ' + anchorWrapper.definition.Name + ' records is ' + max));
                return CS.Util.getPromise(executionChain);
            }

            if (!productId) {
                products = this.getAvailableProducts(attrRef);
                productId = products[0][prefix + 'Product_Definition__c'];
            }

            if (CS.UI) {
                CS.UI.suspendUpdates();
            }

            var promiseContainer = {
                promise: CS.Util.getPromise(executionChain)
            };

            var configWrapper = createConfiguration(prefix, config, anchorRef, productId, parent, promiseContainer);

            var self = this;
            var promise = promiseContainer.promise.then(function() {
                CS.Log.debug('***** After createConfiguration call...');

                // set proper config name for related product BUG-01451
                var numRelatedProducts = anchorWrapper.relatedProducts.length;
                var maxIndex = 0;
                // Backslash-escape all non-alphanumeric characters in the Attribute name
                var rpAttrName = attrDef['Name'].replace(/([^A-Za-z0-9 ])/g, function(match, $1) { return '\\' + $1; });
                var rpValidNameRegex = new RegExp(rpAttrName + ' \\d+');
                for (var i = 0; i < numRelatedProducts; i++) {
                    var rpPcName = anchorWrapper.relatedProducts[i].config['Name'];
                    if (!rpValidNameRegex.test(rpPcName)) {
                        continue;
                    }

                    var lastToken = rpPcName.split(' ').pop();
                    if (jQuery.isNumeric(lastToken)) {
                        var sufixIndex = parseInt(lastToken);
                        if (maxIndex < sufixIndex) {
                            maxIndex = sufixIndex;
                        }
                    }
                }
                maxIndex++;

                configWrapper.config.Name = attrDef['Name'] + ' ' + maxIndex;
                anchorWrapper.attr[prefix + 'Display_Value__c'] = configWrapper.config.Name;
                configWrapper.config[prefix + 'Configuration_Status__c'] = 'Valid';
            });

            promise = CS.Service.selectConfiguration(anchorRef, promise)
                .then(function success() {
                    if (api.productHasChanged) {
                        api.productHasChanged(CS.Service.getCurrentProductId(), 0);
                    }
                    displayScreen(0);
                    CS.Rules.evaluateAllRules('after displayScreen in addRelatedProduct');
                });

            executionChain.resolve();

            return promise;
        }

        /*
         * Create new product configuration
        */
        function createConfiguration(prefix, configData, anchorRef, newProductId, parent, promiseContainer) {
            CS.Log.info('###>>> Starting createConfiguration(): ', configData, '/', anchorRef, '/', newProductId, '/', parent);

            var ROOT_REFERENCE = '';

            var productIndex = CS.Service.getProductIndex(newProductId);

            if (!productIndex) {
                throw 'Product index for ' + newProductId + ' not found';
            }

            var productDef = productIndex.productsById[newProductId],
                wrapper = configData[anchorRef],
                newAttrDefs = productIndex.attributeDefsByProduct[newProductId],
                idx = 0,
                name,
                newConfig = {},
                context,
                attr,
                defId,
                ref;

            if (anchorRef !== ROOT_REFERENCE && !wrapper) {
                return error('Could not locate reference ', anchorRef, configData);
            }

            if (!productDef) {
                return error('Could not find product definition for id', newProductId);
            }

            if (!newAttrDefs) {
                return error('Could not find attribute definitions for product id', newProductId);
            }

            if (anchorRef === ROOT_REFERENCE) {
                // root config
                ref = anchorRef;
            } else {
                // attaching a related product configuration to an attribute on the parent
                idx = wrapper.relatedProducts.length;
                name = wrapper.attr.Name;
                ref = CS.Util.stripReference(anchorRef) + idx;
            }

            context = getContext(ref, name, idx, parent);

            newConfigWrapper = buildConfig(prefix, productDef, ref, context);

            CS.Log.info('Creating configuration for reference ' + ref);

            if (anchorRef !== ROOT_REFERENCE) {
                // Link related product to parent and mark as unsaved
                newConfigWrapper.parent = parent;
                newConfigWrapper.unsaved = true;
                var relatedProducts = wrapper.relatedProducts.slice(0);
                relatedProducts[idx] = newConfigWrapper;
                CS.binding.update(anchorRef, {relatedProducts: relatedProducts});
            }

            var attrContext = {ref: context.ref, index: 0};

            for (defId in newAttrDefs) {
                attr = buildAttribute(prefix, newAttrDefs[defId], attrContext, productIndex.find('selectOptionsByAttribute', defId), productIndex.find('attributeFieldDefsByAttributeDef', defId));
                configData[attr.reference] = attr;
            }
            var customLookupConfigs = getCustomLookupConfigs(prefix, newAttrDefs, productIndex);

            populateScreens(newProductId, newConfigWrapper);

            if (configData[ref]) {
                // Overlay config on parent attribute node in configuration for related product #0
                jQuery.extend(configData[anchorRef], newConfigWrapper);
            } else {
                configData[ref] = newConfigWrapper;
            }

            var linkedObjectPropertiesCacheKey = params.linkedId + '|' + newProductId;
            var linkedObjectPropertiesExist = CS.Util.isObject(configData[ref]['linkedObjectProperties']);
            var linkedObjectApiExists = (
                api['loadLinkedObjectProperties'] instanceof Function && api['getLinkedObjectId'] instanceof Function
            );

            if (linkedObjectPropertiesExist) {
                // If cache key doesn't exist... (mind the negation operator)
                if(!linkedObjectPropertiesCache.hasOwnProperty(linkedObjectPropertiesCacheKey)) {
                    linkedObjectPropertiesCache[linkedObjectPropertiesCacheKey] =
                        configData[ref]['linkedObjectProperties'];
                }
            }

            if (linkedObjectPropertiesExist || !linkedObjectApiExists) {

                loadRulesForConfig(ref, productDef);

            } else {

                function _loadLinkedObjectProperties(deferred, params) {
                    var key = params.linkedObjectPropertiesCacheKey;

                    if (CS.Util.isObject(params.linkedObjectPropertiesCache[key])) {

                        CS.Log.info('***** Linked object properties cache hit, cache key: ', key);
                        params.configData[params.ref]['linkedObjectProperties'] = params.linkedObjectPropertiesCache[key];
                        deferred.resolve(params);
                    } else {

                        CS.Log.info('***** Loading linked object properties (deferred)...');
                        params.api.loadLinkedObjectProperties(params.linkedId, params.newProductId,
                            function linkedObjectPropertiesCallback(linkedObjectProperties) {

                                if (!CS.Util.isObject(linkedObjectProperties)) {
                                    linkedObjectProperties = {};
                                }

                                params.linkedObjectPropertiesCache[params.linkedObjectPropertiesCacheKey] = params.configData[params.ref]['linkedObjectProperties'] = linkedObjectProperties;
                                deferred.resolve(params);
                            }
                        );
                    }
                }

                function _loadCustomLookupReferencedAttributes(deferred, params) {
                    if (!params.configData[params.ref]['customLookupReferencedAttributes'] && Object.keys(params.customLookupConfigs).length > 0) {
                        CS.Log.info('***** Loading Custom Lookup Referenced Attributes (deferred) ...');

                        params.api.loadCustomLookupReferencedAttributes(
                            JSON.stringify(params.customLookupConfigs),
                            function(customLookupReferencedAttributes) {
                                if (CS.Util.isObject(customLookupReferencedAttributes)) {
                                    params.configData[params.ref]['customLookupReferencedAttributes'] = customLookupReferencedAttributes;
                                }
                                deferred.resolve(params);
                            }
                        );
                    } else {
                        CS.Log.info('***** NOT Loading Custom Lookup Referenced Attributes (already loaded) ...');
                        deferred.resolve(params);
                    }
                }

                function _loadRulesForConfig() {
                    CS.Log.info('***** Loading rules for configuration (deferred)...');
                    loadRulesForConfig(ref, productDef);
                }

                var self = this;
                if (!promiseContainer || !promiseContainer.promise) {
                    promiseContainer = {};

                    var executionChain = CS.Util.getDeferred();
                    promiseContainer.promise = CS.Util.getPromise(executionChain);
                    executionChain.resolve();
                }
                promiseContainer.promise = promiseContainer.promise.then(CS.Util.defer(function(d) {
                    d.resolve({
                        api: api,
                        configData: configData,
                        customLookupConfigs: customLookupConfigs,
                        linkedObjectPropertiesCache: linkedObjectPropertiesCache,
                        linkedObjectPropertiesCacheKey: linkedObjectPropertiesCacheKey,
                        newProductId: newProductId,
                        ref: ref
                    });
                })).then(
                    CS.Util.defer(_loadLinkedObjectProperties, self)
                ).then(
                    CS.Util.defer(_loadCustomLookupReferencedAttributes, self)
                ).then(
                    _loadRulesForConfig
                );
            }

            CS.Log.info('###>>> Ending createConfiguration(): ', newConfigWrapper);
            return newConfigWrapper;
        }

        function loadRulesForConfig(reference, productDef) {
            if (CS.Rules.hasRules(reference)) {
                return;
            }

            var referenceField = CS.Util.configuratorPrefix + 'reference__c';
            if (!productDef.hasOwnProperty(referenceField)) {
                CS.Log.error('Could not find the field reference__c in the current product definition', productDef);
                return;
            }

            var definitionRef = productDef[referenceField];
            if (!definitionRef) {
                CS.Log.error('Current product definition\'s reference is not defined: ', productDef);
                return;
            }

            var tpl = jQuery('#' + CS.Util.generateId(definitionRef) + '__rules');
            var idx = 0; // this will be for 'leaf' Attributes which presently will always be index 0 (this will change if attribute arrays are introduced using the leaf node index)

            if (tpl.size() === 0) {
                CS.Log.warn('Could not find rules template with reference: ' + definitionRef);
            } else {
                var rules = CS.Util.applyContext(tpl.get(0).innerHTML, idx, reference);
                CS.Rules.addRules(reference, rules);
            }
        }

        /*
         * Build new configuration
        */
        function buildConfig(prefix, def, reference, context) {
            var wrapper = {
                "reference" : reference,
                "config" : {
                    "attributes" : {
                        "type" : "Product_Configuration__c"
                    }
                }
            };
            wrapper.config[prefix + 'Attribute_Name__c'] = context.attrName;
            wrapper.config[prefix + 'Billing_Frequency__c'] = CS.getFrequencyValueForName(def[prefix + 'Default_Billing_Frequency__c']);
            wrapper.config[prefix + 'Contract_Term__c'] = def[prefix + 'Default_Contract_Term__c'];
            wrapper.config[prefix + 'Contract_Term_Period__c'] = CS.getPeriodValueForName(def[prefix + 'Default_Contract_Term_Period__c']);
            wrapper.config[prefix + 'Description__c'] = def[prefix + 'Description__c'];
            wrapper.config[prefix + 'Index__c'] = context.index;
            wrapper.config[prefix + 'Last_Screen_Index__c'] = 0;
            wrapper.config.Name = CS.Util.getFirstDefinedValue([def.Name, def[prefix + 'Description__c']]);
            wrapper.config[prefix + 'Product_Definition__c'] = def.Id;
            wrapper.config[prefix + 'Recurrence_Frequency__c'] = CS.getFrequencyValueForName(def[prefix + 'Default_Frequency__c']);
            wrapper.config[prefix + 'Configuration_Status__c'] = 'Incomplete';
            wrapper.config[prefix + 'Validation_Message__c'] = '';
            wrapper.config[prefix + 'Product_Family__c'] = (def.Name.length > 40) ? def.Name.substr(0, 40) : def.Name;

            return wrapper;
        }

        /*
         * Build new attribute
        */
        function buildAttribute(prefix, def, context, selectOptions, attributeFields) {

            context = context || {};

            var wrapper = {
                "attr": {
                    "attributes": {
                        "type": prefix + "Attribute__c"
                    }
                },
                "attributeFields": {},
                "definitionId": def.Id,
                "displayInfo": context.displayInfo || def[prefix + 'Type__c'],
                "reference": CS.Util.generateReference(def.Name, context),
                "relatedProducts": [],
                "selectOptions": selectOptions
            };

            var typeInfo = {'type': def[prefix + 'Data_Type__c'], 'scale': def[prefix + 'Scale__c']};

            wrapper.attr[prefix + "Attribute_Definition__c"] = def.Id;
            wrapper.attr[prefix + 'Cascade_value__c'] = def[prefix + 'Cascade_value__c'];
            wrapper.attr[prefix + 'Display_Value__c'] = (
                def[prefix + 'Type__c'] === 'Calculation'
                    ? null
                    : CS.DataConverter.localizeValue(def[prefix + 'Default_Value__c'], typeInfo)
            );

            wrapper.attr[prefix + 'Hidden__c'] = def[prefix + 'Hidden__c'];
            wrapper.attr[prefix + 'is_active__c'] = true;
            wrapper.attr[prefix + 'Is_Line_Item__c'] = def[prefix + 'Is_Line_Item__c'];
            wrapper.attr[prefix + 'Is_Required__c'] = def[prefix + 'Required__c'];
            wrapper.attr[prefix + 'Line_Item_Sequence__c'] = def[prefix + 'Line_Item_Sequence__c'];
            wrapper.attr[prefix + 'Line_Item_Description__c'] = def[prefix + 'Line_Item_Description__c'];
            wrapper.attr.Name = def.Name;
            wrapper.attr[prefix + 'Price__c'] = def[prefix + 'Base_Price__c'] || 0;
            wrapper.attr[prefix + 'Value__c'] = (
                def[prefix + 'Type__c'] === 'Calculation'
                    ? ''
                    : CS.DataConverter.normalizeValue(def[prefix + 'Default_Value__c'], typeInfo)
            );

            wrapper.attr[prefix + 'Recurring__c'] = def[prefix + 'Recurring__c'];

            if (def[prefix + 'Type__c'] === 'Select List' && def[prefix + 'Default_Value__c'] && selectOptions) {
                for (var i = 0; i < selectOptions.length; i++) {
                    if (selectOptions[i] == def[prefix + 'Default_Value__c']) {
                        wrapper.attr[prefix + 'Display_Value__c'] = selectOptions[i].Name;
                        break;
                    }
                }
            }

            _.each(attributeFields, function(a) {
                CS.Service.setAttributeField(wrapper, a.Name, a[prefix + 'Default_Value__c']);
            });

            return wrapper;
        }

        function getCustomLookupConfigs(prefix, attributeDefinitions, productIndex) {
            var customLookupConfigs = {};

            for (defId in attributeDefinitions) {
                if (!attributeDefinitions.hasOwnProperty(defId)) { continue; }

                var lookupConfigId = attributeDefinitions[defId][prefix + "Lookup_Config__c"];
                if (lookupConfigId) {
                    var lookupConfig = productIndex.all[lookupConfigId];
                    var lookupCustomisationClass = lookupConfig[prefix + "lookup_customisations_impl__c"];
                    if (lookupCustomisationClass && !customLookupConfigs[lookupConfigId]) {
                        customLookupConfigs[lookupConfigId] = lookupConfig[prefix + "lookup_customisations_impl__c"];
                    }
                }
            }

            return customLookupConfigs;
        }

        function populateScreens(productId, config) {
            var productIndex = CS.Service.getProductIndex(productId),
                screensByParent = null,
                configScreens = [],
                idx = 0,
                attrRefsByDef = {},
                newAttrDefs = productIndex.attributeDefsByProduct[productId],
                defId,
                attrContext = {ref: '', index: 0};

            var screenFlowName = CS.Service.getScreenFlowName();
            var usesScreenflow = false;
            if (screenFlowName !== '') {
                var flowIdsByProduct = productIndex.screenFlowIdsByNameAndProduct[screenFlowName];
                if (flowIdsByProduct && flowIdsByProduct[productId]) {
                    var screenFlowId = flowIdsByProduct[productId];
                    screensByParent = productIndex.screensByScreenFlow[screenFlowId];
                    usesScreenflow = true;
                }
            }
            if (!usesScreenflow) {
                screensByParent = productIndex.screensByProduct[productId];
            }

            for (defId in newAttrDefs) {
                ref = CS.Util.generateReference(newAttrDefs[defId].Name, attrContext);
                attrRefsByDef[defId] = ref;
            }

            for (idx in screensByParent) {
                var screen = screensByParent[idx],
                    attrs = productIndex.attributeDefsByScreen[screen.Id],
                    attrRefs = [];

                for (var attrId in attrs) {
                    attrRefs.push(attrRefsByDef[attrId]);
                }

                configScreens[idx] = {
                    id: screen.Id,
                    reference: screen._reference,
                    attrs: attrRefs
                };
            }

            config.screens = configScreens;
        }

    </script>

    <!-- / Inline editing script -->

    <script type="text/javascript">

        /*
         * Script for creating and rendering Select2 lookup fields
        */

        var ClientCustom = {};
        ClientCustom.sllInit = function(elemId) {

            function getTotalColumnsWidth(columnSizeCSV) {
                if (columnSizeCSV === null || columnSizeCSV.length === 0) {
                    return -1;
                }
                var totalColumnsWidth = columnSizeCSV.split(',').reduce(function(a, b) {
                    return ((CS.Util.isInteger(+a)) ? +a : 0 ) + ((CS.Util.isInteger(+b)) ? +b : 0 );
                });
                return totalColumnsWidth;
            }

            function getLookupQueryReferencedAttributes(lookupConfigId, definitionId, reference) {
                // check if custom lookup implementation
                var lookupConfig = CS.Service.getProductIndex(definitionId).all[lookupConfigId];
                if (lookupConfig[prefix + 'lookup_customisations_impl__c']) {
                    var ref = reference;
                    var referencedAttributes = CS.Service.config[ref].customLookupReferencedAttributes[lookupConfigId];
                    return JSON.parse(referencedAttributes);
                }
                var lookupQueries = CS.Service.getProductIndex(definitionId).lookupQueriesByName;
                for (id in lookupQueries) {
                    var lookupQuery = lookupQueries[id];
                    if (lookupQuery[prefix + 'Lookup_Config__c'] === lookupConfigId) {
                        var referencedAttributes = lookupQuery[prefix + 'Referenced_Attributes__c'];
                        if (referencedAttributes == '' || referencedAttributes == undefined) {
                            return [];
                        }
                        return JSON.parse(referencedAttributes);
                    }
                }
                return [];
            }

            function functionDecorator(f) {
                return function() {
                    return f.apply(this, arguments);
                }
            }

            function formatSelection(lookupRecord, attrRef, currentSelectListLookupConfigId) {
                var id = lookupRecord.text.id;
                var name = lookupRecord.text.name;

                // check init selection, cache is not existing, we need just a value for display
                if (CS.selectListLookupDataCache === undefined) {
                    if (name !== undefined) {
                        return name;
                    }
                    return id;
                }

                var selectListLookupData = CS.selectListLookupDataCache[currentSelectListLookupConfigId];
                var attrWrapper = CS.getAttributeWrapper(attrRef);
                var listColumnsWidth = attrWrapper.definition[prefix + 'Column_Size_CSV__c'];
                listColumnsWidth = (listColumnsWidth) ? listColumnsWidth.split(',') : [];

                var displayValueField = listColumnsWidth.pop();
                var displayValue;
                if (displayValueField && !CS.Util.isInteger(displayValueField)) {
                    displayValueField = displayValueField.toLowerCase();
                    displayValue = (lookupRecord.text[displayValueField]) ? lookupRecord.text[displayValueField] : undefined;
                }

                if (selectListLookupData !== undefined) {
                    if (displayValue !== undefined) {
                        return displayValue;
                    }
                    if (name !== undefined) {
                        return name;
                    }
                    return id;
                }

                if (displayValue !== undefined) {
                    return displayValue;
                }
                if(name !== undefined) {
                    return name;
                }
                return id;
            }

            function wrapConfiguratorAction(action, name, binding) {
                return _.debounce(function(e) {
                    CS.Log.debug(name);
                    var el = jQuery(e.currentTarget),
                        group = el.attr('data-cs-group'),
                        ref = el.attr('data-cs-ref'),
                        json = el.attr('data-cs-params'),
                        params = json ? JSON.parse(json) || {} : {},
                        ret;

                    params.el = el;
                    params.group = group;
                    params.ref = ref;
                    //params.ref = binding.wrapper.reference;

                    el.attr('disabled', 'disabled');
                    try {
                        ret = action(params, binding, e);
                    } catch (err) {
                        CS.Log.error(err.message, err);
                    } finally {
                        el.removeAttr('disabled')
                        .css('opacity', '');
                    }

                    return ret ? ret : false;

                }, 500, true);
            }

            function getSelect2DisplayFieldName(attrRef) {
                var DEFAULT_SSL_DISPLAY_FIELD_NAME = 'Name';
                var attrWrapper = CS.getAttributeWrapper(attrRef);
                var listColumnsWidth = attrWrapper.definition[prefix + 'Column_Size_CSV__c'];
                listColumnsWidth = (listColumnsWidth) ? listColumnsWidth.split(',') : [];

                if (listColumnsWidth.length === 0) {
                    return DEFAULT_SSL_DISPLAY_FIELD_NAME;
                }

                var displayFieldName = listColumnsWidth.pop();
                if (CS.Util.isInteger(+displayFieldName)) {
                    return DEFAULT_SSL_DISPLAY_FIELD_NAME;
                }
                return displayFieldName;
            }

            function getSelectListLookup(attrRef, lookupConfigId, productDefinitionId, attributeValueParams, query) {

                var dynamicFilterParams = '';
                if (attributeValueParams) {
                    nameIdPairs = attributeValueParams.split(',');
                    for (i = 0 ; i < nameIdPairs.length ; i++) {
                        var oneNameIdPair = nameIdPairs[i].split('|');
                        if (dynamicFilterParams != '') {
                            dynamicFilterParams += '|';
                        }
                        dynamicFilterParams += oneNameIdPair[0] + '=' + getAttributeValueByAttributeName(oneNameIdPair[0]);
                    }
                }

                var lookupparams = {
                    "lookupConfigId" : lookupConfigId,
                    "searchTerm" : query.term,
                    "pageNo" : query.page - 1,
                    "productDefinitionId" : productDefinitionId,
                    "attributeValueParams" : urlEncode(dynamicFilterParams)
                };

                CS.Service.getSelectListLookup(lookupparams, function(result, event) {

                    if (event.status) {
                        var selectListLookupJSON = result;
                        var listColumnsMap = selectListLookupJSON.listColumns;
                        var listColumnsNames = selectListLookupJSON.columnNames;
                        var sortedListColumns = {};
                        var sortedListColumnNames = {};

                        for (var i = 0; i < listColumnsMap.length; i++) {
                            for (key in listColumnsMap[i]) {
                                sortedListColumns[key] = listColumnsMap[i][key];
                                sortedListColumnNames[key] = listColumnsNames[i][key];
                            }
                        }

                        if (CS.selectListLookupDataCache === undefined) {
                            CS.selectListLookupDataCache = {};
                        }

                        CS.selectListLookupDataCache[lookupConfigId] = {
                            listColumns : sortedListColumns,
                            recordData : selectListLookupJSON.records,
                            columnTypes : selectListLookupJSON.columnTypes,
                            columnNames : sortedListColumnNames,
                            orderOfRecords : selectListLookupJSON.orderOfRecords,
                            warnings : selectListLookupJSON.warnings
                        };

                        currentSelectListLookupConfigId = lookupConfigId;
                        selectListLookupQuery(query);
                    }
                });
            }

            function selectListLookupQuery(query) {
                var SELECT_LIST_LOOKUP_PAGE_SIZE = 25;
                var data = {results: []};
                var selectListLookupData = CS.selectListLookupDataCache[currentSelectListLookupConfigId];
                var recordData = selectListLookupData.recordData;
                var orderOfRecords = selectListLookupData.orderOfRecords;
                var orderedData = [];

                for (key in orderOfRecords) {
                    orderedData.push(recordData[orderOfRecords[key]]);
                }

                for (var i = 0, len = orderedData.length; i < len; i++) {
                    data.results.push({id: orderedData[i].id, text: orderedData[i]});
                }

                if (Object.keys(orderedData).length > SELECT_LIST_LOOKUP_PAGE_SIZE) {
                    // page has 25 records, 26th record (if it exists) is indicator that there are more records
                    // pop 26th record (if it exists) to avoid duplicates
                    data.results.pop();
                    data.more = true;
                } else {
                    data.more = false;
                }

                query.callback(data);

                if (selectListLookupData && selectListLookupData.warnings && selectListLookupData.warnings instanceof Array) {
                    var attributeName = query.element && query.element[0] && query.element[0].name;
                    for (var i = 0; i < selectListLookupData.warnings.length; i++) {
                        CS.logWarning(
                            attributeName,
                            ':',
                            selectListLookupData.warnings[i]
                        );
                    }
                }
            }

            function getColumnWidthsArray(columnSizeCSV) {
                var columnWidths = [];
                if (columnSizeCSV === null || columnSizeCSV.length === 0) {
                    return -1;
                }
                columnSizeCSV.split(',').map(function(a) {
                    if (CS.Util.isInteger(+a)) {
                        columnWidths.push(+a);
                    }
                });
                return columnWidths;
            }

            function getColumnStyleWidths(attrRef, listColumns) {
                var attrWrapper = CS.getAttributeWrapper(attrRef);
                var columnSizeCSV = attrWrapper.definition[prefix + 'Column_Size_CSV__c'];
                var columnWidths = getColumnWidthsArray(columnSizeCSV);
                var columnStyleWidths = [];
                var listColumnsLength = Object.keys(listColumns).length;

                // no column information, evenly distributed column widths will be generated
                var averageWidth = (100 / listColumnsLength);
                if (columnWidths !== -1) {
                    averageWidth = (100 / (listColumnsLength - columnWidths.length));
                }

                if (columnWidths === -1) {
                    for (var i = 0; i < listColumnsLength; i++) {
                        columnStyleWidths.push('style="width: ' + averageWidth + '%;"');
                    }
                } else {
                    // Generate column widths based on CSV list information available
                    // Note that missing widths will be ignored and proportional
                    for (var i = 0; i < listColumnsLength; i++) {
                        var columnWidth = (columnWidths[i]) ? columnWidths[i] + 'em;"' : averageWidth + '%;"';
                        columnStyleWidths.push('style="width:' + columnWidth);
                    }
                }

                return columnStyleWidths;
            }

            function formatResult(lookupRecord, attrRef, lookupConfigId) {
                if (lookupRecord.id === undefined) {
                    return;
                }
                var selectListLookupData = CS.selectListLookupDataCache[lookupConfigId];
                var recordData = selectListLookupData.recordData;
                var listColumns = selectListLookupData.listColumns;
                var columnTypes = selectListLookupData.columnTypes;
                var attrWrapper = CS.getAttributeWrapper(attrRef);
                var columnStyleWidths = getColumnStyleWidths(attrRef, listColumns);
                var columnCnt = 0;
                var htmlMarkup = [
                    '<div class="rTable" style="width: 100%;">',
                    ' <div class="rTableRow">'
                ];

                for (key in listColumns) {
                    var fieldName = listColumns[key];
                    var item = lookupRecord.text[fieldName];
                    var attrDataType = { type: columnTypes[fieldName] };
                    item = CS.DataConverter.normalizeValue(item, attrDataType);
                    item = CS.DataConverter.localizeValue(item, attrDataType);
                    htmlMarkup.push('<div class="rTableCell" title="', item, '" ', columnStyleWidths[columnCnt++], '>', item, '</div>');
                }
                htmlMarkup.push(
                    ' </div>',
                    '</div>'
                );

                return htmlMarkup.join('');
            }

            function formatHeader(attrRef, lookupConfigId) {
                var selectListLookupData = CS.selectListLookupDataCache[lookupConfigId];
                var listColumns = selectListLookupData.listColumns;
                var columnNames = selectListLookupData.columnNames;
                var columnStyleWidths = getColumnStyleWidths(attrRef, listColumns);
                var columnCnt = 0;
                var macintoshNoScrollbarCSS = (navigator.appVersion.indexOf("Mac") !=-1 ) ? ' OSX' : '';
                var htmlMarkup = [
                    '<ul class="select2-results tableHeader ', macintoshNoScrollbarCSS ,'">',
                    ' <li>',
                    '  <div class="select2-result-label">',
                    '   <div class="rTable" style="width: 100%;">',
                    '    <div class="rTableRow">'
                ];

                for (key in columnNames) {
                    var fieldName = columnNames[key];
                    htmlMarkup.push('<div class="rTableCell" title="', fieldName, '" ', columnStyleWidths[columnCnt++], '>', fieldName, '</div>');
                }

                htmlMarkup.push(
                    '    </div>',
                    '   </div>',
                    '  </div>',
                    ' </li>',
                    '</ul>'
                );

                return htmlMarkup.join('');
            }
                // Attributi
            function getAttributeValueByAttributeName(attributeName) {
                var attrValue = '';
                var attrPrice = '';
                var currentConfig = CS.Service.config;
                for (var ref in currentConfig) {
                    var o = currentConfig[ref];

                    if (o.attr && o.attr['Name'] === attributeName) {
                        attrValue = o.attr[prefix + 'Value__c'];
                        attrPrice = o.attr[prefix + 'Price__c'];
                        break;
                    }
                }

                return attrValue;
            }

            var name = undefined;
            var action = CS.UI.Actions.find(name);
            var func = action ? wrapConfiguratorAction(action.action, name, binding) : undefined;
            var a = {};
            var prefix = CS.Util.configuratorPrefix;
            var INPUT_DELAY_BEFORE_AJAX = 250;
            var SELECT_LIST_LOOKUP_DEFAULT_MINIMUM_INPUT_LENGTH = 3;
            var SELECT_LIST_LOOKUP_NOSCROLL_MAX_RECORD_TRESHOLD = 9;
            var SELECT_LIST_LOOKUP_BIGDROP_SIZE_MIN_WIDTH_TRESHOLD = 30;
            var SELECT_LIST_LOOKUP_BIGDROP_SIZE_MIN_COLUMN_TRESHOLD = 3;
            var minInputLength  = 0;
            var x  = document.getElementById(elemId);
            var el = jQuery(x).parent().find('[data-cs-select-list-lookup="true"]');
            var attrRef = el.attr('data-cs-binding');
            var attrWrapper = CS.getAttributeWrapper(attrRef);
            var ad = attrWrapper.definition;
            var productDefinitionId = attrWrapper.definition[prefix + 'Product_Definition__c'];
            var minInputLength = (ad[prefix + 'Minimum_Input_Length__c'] === null) ?
                SELECT_LIST_LOOKUP_DEFAULT_MINIMUM_INPUT_LENGTH : (ad[prefix + 'Minimum_Input_Length__c']);
            var lookupConfigId = ad[prefix + 'Lookup_Config__c'];
            var columnSizeCSV = ad[prefix + 'Column_Size_CSV__c'];
            var getSelectListLookupDebounced = _.debounce(getSelectListLookup, INPUT_DELAY_BEFORE_AJAX);
            var displayFieldName = getSelect2DisplayFieldName(attrRef);
            var attributeValueParams = getLookupQueryReferencedAttributes(lookupConfigId, ad.cscfga__Product_Definition__c, attrWrapper.reference.split(':')[0]).join(',');
            var a = attrWrapper.attr;
            var displayValue = a[prefix + 'Column_Size_CSV__c'];

            // prepare CSS fingerprint
            var extendedDropTableWidth = '';
            var listColumns = CS.Util.getListColumnsForLookupConfigId(lookupConfigId);
            if (listColumns.length > SELECT_LIST_LOOKUP_BIGDROP_SIZE_MIN_COLUMN_TRESHOLD) {
                extendedDropTableWidth = 'select2-bigdrop ';
            }

            // get select2 dropdown size in em units, if over 30 extend the table to wide variant
            if (extendedDropTableWidth === '') {
                var tableSizeInEms = getTotalColumnsWidth(null);
                if (tableSizeInEms > SELECT_LIST_LOOKUP_BIGDROP_SIZE_MIN_WIDTH_TRESHOLD) {
                    extendedDropTableWidth = 'select2-bigdrop ';
                }
            }

            // Always use bigdrop
            extendedDropTableWidth = 'select2-bigdrop ';

            var dropdownCssClassExtended = extendedDropTableWidth + CS.Util.getCssFingerprint(attrRef);
            el.val(a[prefix + 'Display_Value__c']);

            el.select2({
                width : '100%',
                allowClear : true,
                minimumInputLength: minInputLength,
                escapeMarkup: function (m) { return m; },
                dropdownCssClass: dropdownCssClassExtended,
                formatSelection: function(lookupRecord) { return functionDecorator(formatSelection)(lookupRecord, attrRef, lookupConfigId); },
                formatResult: function(lookupRecord) { return functionDecorator(formatResult)(lookupRecord, attrRef, lookupConfigId); },
                initSelection : function (element, callback) { callback({id:a[prefix + 'Value__c'], text:{ name: a[prefix + 'Display_Value__c']}}) },
                placeholder: (minInputLength === 0) ?
                    CS.Labels.selectlistlookup_Please_select_value : CS.Labels.selectlistlookup_Please_enter_search,
                query: function(query) { getSelectListLookupDebounced(attrRef, lookupConfigId, productDefinitionId, attributeValueParams, query) }
            })
            .on('select2-opening', function(e) {
                // remove dataLoaded class to reduce height
                var nodes = jQuery('.select2-drop.' + CS.Util.getCssFingerprint(attrRef));
                if (nodes.length === 1) {
                    nodes.removeClass('dataLoaded');
                }
            })
            .on('select2-removed', function(e) {
                CS.setAttributeValue(attrRef, '');
            })
            .on('select2-loaded', function(e) {
                var nodes = jQuery('.select2-drop.' + CS.Util.getCssFingerprint(attrRef) + ' .select2-results');
                if (nodes.length === 1) {
                    var html = formatHeader(attrRef, lookupConfigId);
                    nodes.before(html);
                }
                if (CS.selectListLookupDataCache[lookupConfigId]) {
                    var nodes = jQuery('.select2-drop.' + CS.Util.getCssFingerprint(attrRef));
                    if (Object.keys(CS.selectListLookupDataCache[lookupConfigId].recordData).length > SELECT_LIST_LOOKUP_NOSCROLL_MAX_RECORD_TRESHOLD
                        && nodes.length === 1) {
                            // append dataLoaded class to constrain height
                            nodes.addClass('dataLoaded');
                    }
                }
            })
            .on('change', function(e) {
                if (e.added) {
                    var displayValue = e.added.text[displayFieldName];
                    if (displayValue === undefined) {
                        displayValue = e.added.text['id'];
                    }
                    a[prefix + 'Display_Value__c'] = displayValue;
                    a[prefix + 'Value__c'] = e.val;

                    var lookupRecord = e.added.text;
                    var id = e.val;
                    CS.lookupRecords[id] = lookupRecord;
                }
            });

            if (func && !j.data('CS.init')) {
                el.on('click.CS', func).css({cursor: 'pointer'}).data('CS.init', true);
            }
        }
    </script>

    <script type="text/html" id="CS.MultipleRelatedProduct__tpl">
    <%  var disabled = definition.Max__c && relatedProducts.length >= definition.Max__c ? 'disabled="disabled"' : '',
            prod,
            attRef,
            rowClass;
        var attr = anchor.attr;
        var isReadOnly = attr[CS.Util.configuratorPrefix + 'Is_Read_Only__c'];
        var isActive = attr[CS.Util.configuratorPrefix + 'is_active__c'];
        var isRequired = attr[CS.Util.configuratorPrefix + 'Is_Required__c'];
    %>
        <div class="apexp">
            <div class="individualPalette">
                <div class="bootstrap-iso">
                    <div class="panel panel-success">
                        <div class="panel-heading clearfix">
                            <h4 class="panel-title pull-left">
                                <span><%= definition.Name %></span>
                                <% if (isRequired) { %><span class="required">(Required)</span><% } %>
                                <% if (isReadOnly) { %><span class="readOnly">(Read Only)</span><% } %>
                            </h4>
                            <div class="CS_configButtons text-center">

    <%
                            if (CS.getAttributeValue('ProductType_0') == 'Inline') {
    %>
                                <button class= "btn btn-primary" <%= disabled %>  data-cs-control="<%= anchor.reference %>" data-cs-ref="<%= anchor.reference %>" onclick="addRelatedProduct('<%= anchor.reference %>', '<%= anchor.definitionId %>')" data-cs-type="add" data-role="none">New <%= definition.Name %></button>
    <%
                            }
                            else {
    %>
                                <button class= "btn btn-primary" <%= disabled %>  data-cs-control="<%= anchor.reference %>" data-cs-ref="<%= anchor.reference %>" data-cs-action="addRelatedProduct" data-cs-type="add" data-role="none">New <%= definition.Name %></button>
    <%
                            }
    %>
                            </div>
                        </div>
                        <div class="pbBody">
    <% if (relatedProducts.length > 0) { %>
        <table id="relatedListTableID" class="table table-striped table-hover lato" data-cs-binding="<%= anchor.reference %>" data-cs-control="<%= anchor.reference %>" data-cs-type="list">
            <thead class="rich-table-thead">
                <tr class="headerRow">
                    <th class="headerRow" style="width: 6em;">Action</th>
                    <th class="headerRow" style="width: 6em;">Status</th>
                    <th class="headerRow">Name</th>
    <%  for (var i = 0; i < cols.length; i++) {
            var spec = colSpecs[cols[i]]; %>
                <th class="headerRow">
                    <%= spec.header %>
                </th>
    <%  } %>
                </tr>
            </thead>
    <%  for (var i = 0; i < relatedProducts.length; i++) {
            prod = relatedProducts[i];
            rowClass = 'dataRow ' + (i/2 == Math.floor(i/2) ? 'even ' : 'odd ') + (i == 0 ? 'first ' : '') + (i >= relatedProducts.length - 1 ? 'last' : '');
    %>
            <tr data-cs-ref="<%= prod.reference %>">
                <td class="dataCell">
                <% if (isActive && ! isReadOnly) { %>
                    <span data-cs-action="editRelatedProduct" data-cs-ref="<%= prod.reference %>">Edit</span> |
                    <span data-cs-action="removeRelatedProduct" data-cs-ref="<%= prod.reference %>">Del</span>
                <% } %>
                </td>
                <td class="dataCell"><%= prod.config[CS.Util.configuratorPrefix + 'Configuration_Status__c'] %></td>
                <td class="dataCell"><span data-cs-action="editRelatedProduct" data-cs-ref="<%= prod.reference %>"><%= prod.config.Name %></span></td>
    <%
            var prefix = CS.Util.configuratorPrefix;
            for (var j = 0; j < cols.length; j++) {
                if (colSpecs[cols[j]].ref != undefined) {
                    attRef = prod.reference + ':' + colSpecs[cols[j]].ref;
                }
                if (attRef != undefined) {

                    var displayInfo = CS.Service.config[attRef]['displayInfo'];
                    var definition = CS.Service.config[attRef].definition;
                    console.log('Debug: User input type: ' + displayInfo + ', attRef: ' + attRef);
                    if ('User Input' === displayInfo) {
    %>
                        <td><input class="form-control" data-cs-binding="<%=attRef%>" id="<%=attRef%>" name="<%=attRef%>" type="text" value="<%= CS.Service.config[attRef]['attr']['cscfga__Display_Value__c'] %>" onchange="updateAttribute(this)"></input></td>
    <%
                    } else if ('Lookup' === displayInfo && !definition[prefix + 'Select_List_Lookup__c']){

                        lookups = true;
    %>
                        <td>
                            <span class="lookupInput">
                                <input type="text"
                                    id="<%=attRef%>"
                                    name="<%=attRef%>"
                                    data-cs-binding="<%=attRef%>"
                                    data-cs-select-list-lookup="false"
                                    data-role="none"
                                    data-mini="true"
                                    value=""
                                    size="20"
                                    onchange="updateAttribute(this)" />
                            </span>
                        </td>
    <%
                    } else if ('Lookup' === displayInfo && definition[prefix + 'Select_List_Lookup__c']){

                        lookups = true;
    %>
                        <td>
                            <div class="form-control form-control-select-lookup">
                                <span class="lookupInput">
                                    <input style="border: none;" type="text"
                                        id="<%=attRef%>"
                                        name="<%=attRef%>"
                                        data-cs-binding="<%=attRef%>"
                                        data-cs-select-list-lookup="true"
                                        data-role="none"
                                        data-mini="true"
                                        value=""
                                        size="20"
                                        onchange="updateAttribute(this)" />
                                </span>
                            </div>
                        </td>
    <%
                        if (relatedProductsIds.indexOf(attRef) == -1) {
                            relatedProductsIds.push(attRef);
                        }
                    }
                    else if ('Select List' === displayInfo) {
    %>
                        <td>
                            <select class="form-control" data-cs-binding="<%=attRef%>" id="<%=attRef%>" name="<%=attRef%>" onchange="updateAttribute(this)">
    <%
                            var options = CS.Service.config[attRef]['selectOptions'];
                            for (var k = 0; k < options.length; k++) {
                                var selected = (options[k]['Name'] === CS.Service.config[attRef]['attr']['cscfga__Display_Value__c']);
                                if (selected) {
    %>
                                    <option value="<%= options[k]['cscfga__Value__c'] %>" selected="selected"><%= options[k]['Name'] %></option>
    <%
                                } else {
    %>
                                    <option value="<%= options[k]['cscfga__Value__c'] %>"><%= options[k]['Name'] %></option>
    <%                          }
                            }
    %>
                            </select>
                        </td>
    <%
                    }
                    else {
    %>
                        <td><%= CS.getAttributeDisplayValue(attRef) %></td>
    <%
                    }
                }
            }
    %>
            </tr>
    <%  } %>
        </table>
    <% } else { %>
        <table class="table" data-cs-control="<%= anchor.reference %>" data-cs-type="list">
            <tr class="dataRow even first last">
                <td class="dataCell">
                    No items to display
                </td>
            </tr>
        </table>
    <% } %>
                    </div>
                        <div class="pbFooter secondaryPalette">
                            <div class="bg"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </script>

<apex:form style="width: 0; height: 0; position: absolute; left: -1000px;">
    <!--
        This inputField initializes the SFDC DatePicker JS widget.
        The form is hidden due to recent changes in SFDC VF rendering engine
        which started displaying this inputField (it was previously hidden due
        to referencing the read-only SObject field)
    -->
    <apex:inputField value="{!cscfga__Product_Basket__c.CreatedDate}"/>
    <div>Form Test</div>
</apex:form>

<!-- related product selection template START -->
<div id="rpDialogContainer" style="display: none">

        <div class="bPageTitle">
            <div class="ptBody">
                <div class="content">
                    <img src="/s.gif" alt="Rule" class="pageTitleIcon" title="Select Product" />
                    <h1 class="pageType">Select Product</h1>
                    <h2 class="pageDescription">Select Product</h2>
                    <div class="blank">&nbsp;</div>
                </div>
            </div>
        </div>

        <div id="" style="display: block">
            <div class="apexp">
                <div class="Custom24Block">
                    <div id="rpdBreadcrumb" class=""></div>
                    <br />
                </div>
            </div>
        </div>

        <div class="apexp">
            <div class="individualPalette">
                <div class="Custom24Block">
                    <div class="bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette">
                        <div class="pbHeader">
                            <table border="0" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td class="pbTitle"><h2 class="mainTitle">{!$Label.cscfga__selcat_Select_Category}</h2></td>
                                </tr>
                            </table>
                        </div>
                        <div class="pbBody">

                            <table class="list" data-cs-binding="" data-cs-control="" data-cs-type="list" cellpadding="0" cellspacing="0">
                                <thead class="rich-table-thead">
                                    <tr class="headerRow">
                                        <th class="headerRow" width="50%">{!$Label.cscfga__selprodcat_Category_Name}</th>
                                        <th class="headerRow" width="50%">{!$Label.cscfga__selprodcat_Description}</th>
                                    </tr>
                                </thead>
                                <tbody id="rpSelectCategoryList">
                                </tbody>
                            </table>

                        </div>
                        <div class="pbFooter secondaryPalette">
                            <div class="bg"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="apexp">
            <div class="individualPalette">
                <div class="Custom24Block">
                    <div class="bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette">
                        <div class="pbHeader">
                            <table border="0" cellpadding="0" cellspacing="0">
                                <tr>
                                    <td class="pbTitle"><h2 class="mainTitle">Select Product</h2></td>
                                </tr>
                            </table>
                        </div>
                        <div class="pbBody">
                            <table class="list" data-cs-binding="" data-cs-control="" data-cs-type="list" cellspacing="0" cellpadding="0">
                                <thead class="rich-table-thead">
                                    <tr class="headerRow">
                                        <th class="headerRow" width="50%">{!$Label.cscfga__selcat_Product_Name}</th>
                                        <th class="headerRow" width="50%">{!$Label.cscfga__selcat_prod_Description}</th>
                                    </tr>
                                </thead>
                                <tbody id="rpSelectProductDefinitionList">
                                </tbody>
                            </table>
                        </div>
                        <div class="pbFooter secondaryPalette">
                            <div class="bg"></div>
                        </div>
                    </div>
                </div>
                <div id="" class="">
                    <input id="rpCancelButton" type="button" value="{!$Label.cscfga__selcat_Cancel}" class="pbButtonb CS_configButtons"></input>
                </div>
            </div>
        </div>
</div>
<!-- related product selection template END -->
<!-- <c:SlidingPanel />  --> <!-- OLD UI PANEL -->
<c:PricingWidgets2 />

<!-- Latest compiled and minified CSS - In case page header has to be shown bootstrap and flatui css has to be compiled with namespace to avoid css collision -->
<!-- <apex:stylesheet value="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"></apex:stylesheet> -->
<!-- Loading -->
<apex:stylesheet value="{!URLFOR($Resource.FlatUI,'FlatUI/css/flat-ui-iso.css')}"></apex:stylesheet>
<!-- <apex:includeScript value="{!URLFOR($Resource.FlatUI,'FlatUI/js/flat-ui.min.js')}"/> -->
<apex:includeScript value="{!URLFOR($Resource.FlatUI,'FlatUI/js/bootstrap.js')}"/>

<!-- Loading Pick A Date -->
<apex:includeScript value="{!URLFOR($Resource.pickadate,'pickadate.js-3.5.6/picker.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.pickadate,'pickadate.js-3.5.6/picker.date.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.pickadate,'pickadate.js-3.5.6/picker.time.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.pickadate,'pickadate.js-3.5.6/legacy.js')}"/>
<apex:stylesheet value="{!URLFOR($Resource.pickadate,'pickadate.js-3.5.6/themes/classic.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.pickadate,'pickadate.js-3.5.6/themes/classic.date.css')}"/>

<style type="text/css">

    .panel h4 {
        font-size: 20px;
    }

    .lookupInput img.deleteIcon, .lookupInput div.deleteIcon {
        background-image: url({!URLFOR($Resource.cscfga__delete_icon)});
    }
    label.requiredOn {
        font-weight: bold;
    }
    label.requiredOn:after {
        color: #e32;
        content: ' *';
        display:inline;
    }
    .lato tr td {
        font-family: Lato;
    }
    p.attributeErrorMessage {
        margin: 0;
        margin-top: 3px;
        color: #C00;
        position: relative;
        right: -40%;
    }
    .form-control.form-control-date {
        width: inherit;
        display:inline-block;
    }

    .form-control.form-control-date[readOnly] {
        color: #34495e;
        background-color: #fff;
        opacity: 1;
        border-color: #bdc3c7;;
    }

    .form-control.form-control-lookup {
        width: inherit;
        display:inline-block;
    }

    .form-control.form-control-lookup[readOnly] {
        color: #34495e;
        background-color: #fff;
        opacity: 1;
        border-color: #bdc3c7;;
    }

    .form-control.form-control-select-lookup {
        padding: 0px;
    }

    .select2-container{
        height: 28px !important;
    }

    .select2-container.select2-allowclear {
        width: 100%;
        height: 100%;
    }

    .select2-choice {
        width: 100% !important;
        height: 100% !important;
        padding: 0px !important;
        background-image: none !important;
        background-color: #fff !important;
    }

    .select2-chosen {
        padding:  3px 12px;
    }

    .select2-search-choice-close {
        top: 12px !important;
    }

    .select2-arrow {
        border-width: 6px 3px !important;
        right: 4px !important;
        top: 16px !important;
        width: auto !important;
        border-left: 3px solid rgba(0, 0, 0, 0) !important;
        border-radius: 0px !important;
        background-color: #fff !important;
    }
    .dataCell {
        color: black;
    }

    .dataCell:hover {
        color: black;
    }

    </style>

</apex:page>